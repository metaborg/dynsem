module analysis/mark-references

imports
  signatures/ds-sig
  ds

rules
  
  mark-vars = mark-var-defs-in-rules
  
  unmark-vars = alltd(\ Var(x) -> VarRef(x) \ + \ Const(x) -> ConstRef(x) \)

rules
	
	mark-var-defs-in-rules =
		alltd(mark-var-defs-in-rule)
		
  mark-var-defs-in-rule =
  	Axiom(mark-var-defs-in-conclusion)
		
  mark-var-defs-in-rule :
  	RuleW(conc, prem*) -> RuleW(conc', prem'*)
  	where conc' := <mark-var-defs-in-conclusion> conc
        ; prem'* := <map(mark-vardefs-in-premise)> prem*

  mark-var-defs-in-rule :
    Rule(prem*, infer, conc) -> Rule(prem'*, infer, conc')
    where
      conc' := <mark-var-defs-in-conclusion> conc;
      prem'* := <map(mark-vardefs-in-premise)> prem*

  mark-var-defs-in-conclusion =
  	Relation(make-vars, make-vars, id, id)

  mark-vardefs-in-premise =
  	alltd(mark-vardefs-in-relation)

  mark-vardefs-in-relation =
  	Relation(id, id, make-vars, make-vars)
  	<+ TermEq(id, id)
  	<+ TermNeq(id, id)
  	<+ Match(id, make-vars)
  	<+ NMatch(id, make-vars)
  	<+ As(make-vars, make-vars)
  	<+ CasePattern(make-vars, mark-vardefs-in-premise)
  	<+ CaseOtherwise(mark-vardefs-in-premise)
  	<+ GuardedBind(make-vars, id)

  make-vars = alltd(origin-track-forced(\ VarRef(x) -> Var(x) \ + \ ConstRef(x) -> Const(x) \))

