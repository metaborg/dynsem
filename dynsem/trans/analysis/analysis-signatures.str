module analysis/analysis-signatures

imports
  signatures/-
  signatures/dynsem/-
  analysis/-
  ds2ds/abruptions/-
  backend/utils/utils
  backend/common/opts

rules /* store signatures */
  
  store-signatures =
    Signatures(map(
      store-sorts
      <+ store-constructors
      <+ store-native-operators
      <+ store-arrows
      <+ store-semantic-components
      <+ store-native-datatypes
      <+ store-variable-schemes
      <+ store-aliases
    ))
  
  store-built-ins =
    <store-def(|Types())> IntType() => def-int; <store-prop(|SortKind(), def-int)> SystemSort()
    ; <store-def(|Types())> LongType() => def-long; <store-prop(|SortKind(), def-long)> SystemSort()
    ; <store-def(|Types())> FloatType() => def-float; <store-prop(|SortKind(), def-float)> SystemSort()
    ; <store-def(|Types())> RealType() => def-real; <store-prop(|SortKind(), def-real)> SystemSort()
    ; <store-def(|Types())> BoolType() => def-bool; <store-prop(|SortKind(), def-bool)> SystemSort()
    ; <store-def(|Types())> StringType() => def-str; <store-prop(|SortKind(), def-str)> SystemSort()
    ; <store-def(|Types())> ASTType() => def-ast; <store-prop(|SortKind(), def-ast)> SystemSort()

  store-sorts = Sorts(map(store-sort))

  store-sort:
    decl@SortDecl(ty, sort-annos) -> decl
    where
      <store-def(|Types())> ty => ty-def;
      <store-prop(|SortKind(), ty-def)> LanguageSort();
      <map(store-sortanno(|ty-def))> sort-annos
  
  store-sortanno(|ty-def):
    ValueSort() -> <store-prop(|ValueSort(), ty-def)> ValueSort()
  
  store-sortanno(|ty-def):
    ClassSource(s) -> <store-prop(|JClass(), ty-def)> s 

  store-constructors =
    Constructors(map(store-constructor))
    + NativeConstructors(map(store-constructor))
  
  store-constructor:
    d@ConsDecl(c, child*, s, Annos(anno*)) -> d
    with
      arity := <length> child*;
      c-def := <store-def(|Constructors())> (c, arity);
      <store-prop(|Type(), c-def)> ConstructorType(<rw-type> child*, <rw-type> s);
      <store-prop(|ConsKind(), c-def)> LanguageCons();
      <map(store-constructor-anno(|c-def))> anno*
  
  store-constructor-anno(|c-def):
    ImplicitAnno() -> <store-prop(|ImplicitCons(), c-def)> ImplicitCons()
  
  store-constructor-anno(|c-def):
    MetafunAnno() -> <store-prop(|Metafunc(), c-def)> Metafunc()

  store-constructor-anno(|c-def):
    ClassSource(s) -> <store-prop(|JClass(), c-def)> s

  store-constructor:
    d@NativeConsDecl(c, child*, s) -> d
    with
      <store-def(|Constructors())> (c, <length> child*) => c-def;
      <store-prop(|Type(), c-def)> ConstructorType(<rw-type> child*, <rw-type> s);
      <store-prop(|ConsKind(), c-def)> NativeCons()

  consdef-get-name = def-get-name; ?(<id>, _)
  consdef-get-arity = def-get-name; ?(_, <id>)

  store-arrows = Arrows(map(store-arrow))
  
  store-arrow:
    d@ArrowDecl(ArrowROs(ro*), in-srt, ArrowRWs(rw*), arrow, out-srt, _) -> d
    with
      <store-def(|Arrows())> arrow => arrow-def;
      <store-prop(|Type(), arrow-def)> ArrowType(<rw-type> in-srt, <rw-type> out-srt);
      <store-prop(|ArrowKind(), arrow-def)> LanguageArrow();
      <store-prop(|ROs(), arrow-def)> ro*;
      <store-prop(|RWs(), arrow-def)> rw*
  
  store-arrow:
    d@MetaFunDecl(ArrowROs(ro*), cname, kid-srt*, ArrowRWs(rw*), out-srt, _) -> d
    where
      t_name := $[[cname]_[<length; int-to-string> kid-srt*]_Meta];
      t_source := SimpleSort(t_name);
      <store-sort> SortDecl(t_name, []);
      <store-constructor> ConsDecl(cname, kid-srt*, t_source, Annos([MetafunAnno()]));
      <store-def(|Arrows())> "" => arrow-def;
      <store-prop(|Type(), arrow-def)> ArrowType(<rw-type> t_source, <rw-type> out-srt);
      <store-prop(|ArrowKind(), arrow-def)> MetaFunction();
      <store-prop(|ROs(), arrow-def)> ro*;
      <store-prop(|RWs(), arrow-def)> rw*
  
  store-arrow:
    d@NativeFunDecl(ArrowROs(ro*), cname, kid-srt*, ArrowRWs(rw*), out-srt, _) -> d
    where
      t_name := $[[cname]_[<length; int-to-string> kid-srt*]_Native];
      t_source := SimpleSort(t_name);
      <store-sort> SortDecl(t_name, []);
      <store-constructor> ConsDecl(cname, kid-srt*, t_source, Annos([MetafunAnno()]));
      <store-def(|Arrows())> "" => arrow-def;
      <store-prop(|Type(), arrow-def)> ArrowType(<rw-type> t_source, <rw-type> out-srt);
      <store-prop(|ArrowKind(), arrow-def)> NativeArrow();
      <store-prop(|ROs(), arrow-def)> ro*;
      <store-prop(|RWs(), arrow-def)> rw*
  
  store-semantic-components = Components(map(store-semantic-component))
  
  store-semantic-component:
    d@CompDecl(x, s) -> d
    with
      <store-def(|Components())> x => comp-def;
      <rw-type; store-prop(|Type(), comp-def)> s
  
  store-semantic-component:
    d@CompDeclDefault(x, s, t) -> d
    with
      <store-def(|Components())> x => comp-def;
      <rw-type; store-prop(|Type(), comp-def)> s;
      <store-prop(|DefaultValue(), comp-def)> t
  
  store-native-operators = NativeOperators(map(store-native-operator))
  
  store-native-operator:
    d@NativeOpDecl(c, child*, s, annos) -> d
    with
      <store-def(|Constructors())> (c, <length> child*) => c-def;
      <store-prop(|Type(), c-def)> ConstructorType(<rw-type> child*, <rw-type> s);
      <store-prop(|ConsKind(), c-def)> NativeOpCons();
      <map(store-native-operator-anno(|c-def))> annos
  
  store-native-operator-anno(|c-def):
    ClassSource(s) -> <store-prop(|JClass(), c-def)> s
  
  store-native-datatypes = NativeDataTypes(map(store-native-datatype))

  store-native-datatype:
    d@NativeBaseTypeDecl(jstring, name, creatable, func*) -> d
    with
      <store-def(|Types())> name => name-def;
      <store-prop(|SortKind(), name-def)> NativeSort();
      <store-prop(|JClass(), name-def)> jstring;
      <map(store-native-datatype-op(|name-def))> func*;
      if <?Yes()> creatable
      then
        <store-prop(|Creatable(), name-def)> Creatable()
      end

  store-native-datatype:
    d@NativeSubTypeDecl(javastring, name, sup, func*) -> d
    with
      <store-def(|Types())> name => name-def;
      <store-prop(|SortKind(), name-def)> NativeSort();
      <store-prop(|JClass(), name-def)> javastring;
      <store-prop(|NativeTypeSuperType(), name-def)> sup;
      <map(store-native-datatype-op(|name-def))> func*
      
  store-native-datatype-op(|par-def):
    d@NativeFunctionDecl(name, arg*, s) -> d
    with
      <store-def(|NativeDTFun(par-def))> name => name-def;
      <store-prop(|Type(), name-def)> FunctionType(<rw-type> arg*, <rw-type> s)

  store-variable-schemes = VariableSchemes(map(store-variable-scheme))
  
  store-variable-scheme:
    d@VariableScheme(prefix, ty) -> d
    with
      <store-def(|VarSchemes())> prefix => scheme-def;
      <store-prop(|Type(), scheme-def)> <rw-type> ty

  store-aliases = Aliases(map(store-alias))
  
  store-alias:
    d@AliasDecl(name, ty) -> d
    with
      <store-def(|Types())> name => alias-ty-def;
      <store-prop(|SortKind(), alias-ty-def)> AliasSort();
      <store-prop(|Type(), alias-ty-def)> <rw-type> ty

  is-alias = where(lookup-def(|Types()); lookup-prop(|SortKind()) => AliasSort())
  
  get-alias-base = get-alias-base(|[<id>])
  
  get-alias-base(|acc):
    ty -> ty'
    where
      if
        ty-def := <lookup-def(|Types())>;
        <lookup-prop(|SortKind())> ty-def => AliasSort()
      then
        ty-alias := <lookup-prop(|Type())> ty-def;
        <not(fetch-elem(?ty-alias))> acc;
        ty' := <get-alias-base(|[ty-alias | acc])> ty-alias
      else
        ty' := ty
      end
  
rules
  
  check-signatures = alltd(check-signature)
  
  check-signature:
    Module(module-name, _) -> <fail>
    where
      <resolve-path(editor-module-name-error)> module-name
  
  check-signature:
    Module(module-name, _) -> <fail>
    where
      project-path := <OptProjectPath>;
      if not(<ds-has-properties> project-path)
      then
        add-msg(|Warning(), module-name, "Could not find or read a dynsem.properties file")
      end  
  
  check-signature:
    SimpleSort(s) -> <fail>
    where
      <id-to-type; not(lookup-def(|Types()))> s;
      add-msg(|Error(), s, $[Sort [s] is not declared])
  
  check-signature:
    <?SortDecl(s, _)
    + ?AliasDecl(s, _)
    + ?NativeBaseTypeDecl(_, s, _, _)
    + ?NativeSubTypeDecl(_, s, _, _)> -> <fail>
    where
      <lookup-defs(|Types())> s => [_, _ | _];
      add-msg(|Warning(), s, $[Duplicate sort [s]])
  
  check-signature:
    <?SortDecl(s, _)
    + ?AliasDecl(s, _)
    + ?NativeBaseTypeDecl(_, s, _, _)
    + ?NativeSubTypeDecl(_, s, _, _)> -> <fail>
    where
      ty := <rw-type> SimpleSort(s);
      SystemSort() := <lookup-def(|Types()); lookup-prop(|SortKind())> ty;
      add-msg(|Error(), s, $[Sort collides with built-in sort [s]])
  
  check-signature:
    d@AliasDecl(s, _) -> <fail>
    where
      <is-alias; not(get-alias-base)> s;
      <add-msg(|Error(), s, $[Inconsistent aliasing chain for sort [s]])> d
  
  check-signature:
    vs@VariableScheme(prefix, _) -> <fail>
    where
	    <get-matching-varschemes(get-all-varschemes)> prefix => [_, _ | _];
	    add-msg(|Error(), vs, $[Duplicate or overlapping variable or semantic component prefix [prefix]])

  check-signature:
    cd@CompDecl(prefix, _) -> <fail>
    where
	    <get-matching-varschemes(get-all-varschemes)> prefix => [_, _ | _];
	    add-msg(|Error(), cd, $[Duplicate or overlapping variable or semantic component prefix [prefix]])
  
  check-signature:
    Con(cname, c*) -> <fail>
    where
      arity := <length> c*;
      <not(lookup-def(|Constructors()))> (cname, arity);
      add-msg(|Error(), cname, $[Constructor [cname]/[<int-to-string> arity] is not declared])
  
  check-signature:
    <?d@NativeOpDecl(cname, c*, _, _)
    + ?d@ConsDecl(cname, c*, _, _)
    + ?d@NativeConsDecl(cname, c*, _)
    + ?d@MetaFunDecl(_, cname, c*, _, _, _)> -> <fail>
    where
      arity := <length> c*;
      <lookup-defs(|Constructors())> (cname, arity) => [_, _ | _];
      add-msg(|Error(), d, $[Duplicate constructor [cname]/[<int-to-string> arity]])

  check-signature:
    d@ConsDecl(cname, c*, ss@SimpleSort(s), _) -> <fail>
    where
      arity := <length> c*;
      ty := <rw-type> ss;
      SystemSort() := <lookup-def(|Types()); lookup-prop(|SortKind())> ty;
      add-msg(|Error(), d, $[Constructor [cname]/[<int-to-string> arity] cannot be of built-in sort [s]])

  check-signature:
    d@ConsDecl(_, c*, _, Annos(anno*)) -> <fail>
    where
      [_, _ | _] := c*
      <+
      [] := c*
    where
      <fetch-elem(?ImplicitAnno())> anno*;
      add-msg(|Error(), d, $[Only unary constructors can be implicit])

  check-signature:
    decl@ArrowDecl(_, in-srt, _, name, out-srt, _) -> <fail>
    where
	    in-ty := <rw-type> in-srt;
	    out-ty := <rw-type> out-srt;
	    arrow-def := <lookup-def(|Arrows())> name;
	    arrow-ty* := <lookup-props(|Type()); filter(not(?ArrowType(in-ty, out-ty))); make-set> arrow-def;
	    <fetch-elem(?ArrowType(<id>, _); !(<id>, in-ty); type-coerce-sym(type-coerce-full(id)))> arrow-ty*;
	    add-msg(|Error(), decl, $[Arrow LHS overlaps with another arrow with the same name])

  check-signature:
    l@Label(x) -> <fail>
    where
      <not(lookup-def(|Components()))> x;
      add-msg(|Error(), l, $[Unknown semantic component [x]]) 
