module analysis/analysis-rules

imports
  signatures/ds-sig
  signatures/Signatures-sig
  analysis/lib-analysis
  analysis/constructors
  analysis/rename
  analysis/query
  analysis/analysis-signatures
	pp
  ds
  lib-ds

rules /* syntactic checks */
  new-type-transitions-scope(s) = {| MemoTyPath, MemoTyTrans: s |}
  
  post-analysis-checks = alltd(post-analysis-check)
  
  post-analysis-check:
    r@Rule(_, _, Relation(_, Source(lhs, _), _, _)) -> <fail>
    where
      <not(?Con(_, _) + ?As(_, Con(_, _)) + ?Cast(_, ListSort(_)) + ?Cast(Var(_), SimpleSort(_)) + ?Cast(Wld(), SimpleSort(_)))> lhs;
      add-msg(|Warning(), lhs, $[Left hand side of reduction must be a constructor pattern, a list cast pattern, a wildcard cast pattern, or a variable cast pattern])
  
  post-analysis-check:
    dec@Var(v) -> <fail>
    where
      <lookup-def(|Vars()); not(lookup-prop(|Use()))> v;
      add-msg(|Warning(), dec, $[Variable [<unrename-var> v] is never read])

rules /* store variables */
  
  store-rules-all =
    with(init-hitcount);
    alltd(store-rules);
    log-hitcount
  
  store-rules =
    Rules(with(prime-typaths); map(store-rule <+ where(add-msg(|Error(), <id>, $[Rule could not be type checked]))))

  store-rule:
    r@Rule(_, _, Relation(_, Source(lhs, _), arr, _)) -> r
    where
      arrow-name := <get-arrow-name> arr
    where
      lhs-ty := <rulelhs-get-type> lhs
    where
      if arrow-def := <lookup-def(|Arrows())> arrow-name
      then
	      arrow-ty* := <lookup-props(|Type())> arrow-def;
	      if <type-of-applicable-arrow(type-coerce-full(id))> (arrow-ty*, lhs-ty) => arrow-ty
	      then
          <store-rule> (arrow-ty, r)
	      else
	        arrow-ma-ty* := <map(?ArrowType(<id>, _))> arrow-ty*;
	        add-msg(|Error(), lhs, $[Expected one of: [<pp-type> arrow-ma-ty*] but found [<pp-type> lhs-ty]])
	      end
	    else
        add-msg(|Error(), arr, $[Arrow [arrow-name] is not declared])
      end

  rulelhs-get-type:
    Con(cname, c*) -> ty
    where
      ConstructorType(_, ty) := <lookup-def(|Constructors()); lookup-prop(|Type())> (cname, <length> c*)
  
  rulelhs-get-type:
    Cast(_, s) -> <rw-type> s

  rulelhs-get-type:
    As(_, t) -> <rulelhs-get-type> t

  store-rule:
    (ArrowType(ma-ty, bu-ty), r@Rule(p*, _, Relation(Reads(r*), Source(lhs, sc*), _, Target(rhs, tc*)))) -> r
    where
      {| InSource:
        rules(InSource: t -> t);
        <type-check-match(|ma-ty)> lhs
      |};
      <map(labelcomp-to-type-term-pair; type-check-match-wrap)> [r*, sc*];
      <map(type-check-premise-top)> p*;
      <type-check-build-expect(|bu-ty)> rhs;
      <map(labelcomp-to-type-term-pair; type-check-build-expect-wrap)> tc*

  labelcomp-to-type-term-pair:
    LabelComp(ty, v) -> (<rw-type> ty, v)
  
  labelcomp-to-type-term-pair:
  	VarLabelComp(v) -> (scheme-ty, v)
  	where
  	  scheme-def := <get-unique-matching-varscheme> v;
  	  scheme-ty := <lookup-prop(|Type())> scheme-def

rules

  type-check-build-expect(|ex-ty):
    t -> t-ty
    where
      if t-ty := <type-check-build> t
      then
        <type-check-expectation(type-coerce-full(fail)|t, ex-ty)> t-ty
      else
        t-ty := ex-ty;
        ex-ty-str := <pp-type> ex-ty;
        add-msg(|Error(), t, $[Expected type [ex-ty-str]])
      end
  
  type-check-build-expect-wrap:
    (ex-ty, t) -> <type-check-build-expect(|ex-ty)> t
  
  type-check-expectation(coerce|term, expected-ty):
    actual-ty -> actual-ty
    where
      <coerce> (actual-ty, expected-ty)
      <+
      t-ty-str := <pp-type> actual-ty;
      ex-ty-str := <pp-type> expected-ty;
      add-msg(|Error(), term, $[Term of type [t-ty-str] found, but expected [ex-ty-str]])

  type-check-expectation-wrap(coerce|t):
    (expected-ty, actual-ty) -> <type-check-expectation(coerce|t, expected-ty)> actual-ty

  type-check-build =
  	type-check-build-helper; get-alias-base
  	<+ type-err-build-match-symbols
    <+ type-err-build
  
  type-check-build-helper =
    type-check-build-num
    <+ type-check-build-str
    <+ type-check-build-bool
    <+ type-check-build-fresh
    <+ type-check-build-var
    <+ type-check-build-con
    <+ type-check-build-list
    <+ type-check-build-map
    <+ type-check-build-cast
    <+ type-check-build-nativefuncall
  
  type-err-build-match-symbols:
    t -> NONETYPE()
    where 
      ?Wld() + ?Var(_)
    where 
      add-msg(|Error(), t, $[Match symbol in build pattern])
  
  type-err-build:
    t -> NONETYPE()
    where
      add-msg(|Error(), t, $[Type error])
  
  type-check-build-num:
  	Int(_) -> IntType()
  
  type-check-build-num:
    Real(_) -> RealType()
  
  type-check-build-str:
    String(_) -> StringType()
  
  type-check-build-bool:
    True() -> BoolType()
  
  type-check-build-bool:
    False() -> BoolType()

  type-check-build-fresh:
    Fresh() -> IntType()
  
  type-check-build-var:
    r@VarRef(v) -> v-ty
    where
      v-def := <lookup-def(|Vars())> v;
      v-ty := <lookup-prop(|Type())> v-def;
      <store-prop(|Use(), v-def)> r
  
  type-check-build-var:
    r@VarRef(v) -> <fail>
    where
      <not(lookup-def(|Vars()))> v;
      add-msg(|Error(), r, $[Variable [<unrename-var> v] cannot be resolved])
  
  type-check-build-con:
    Con(c, aparam*) -> ty
    where
      ConstructorType(fparam-ty*, ty) := <lookup-def(|Constructors()); lookup-prop(|Type())> (c, <length> aparam*);
      <zip(type-check-build-expect-wrap)> (fparam-ty*, aparam*)

  type-check-build-list:
    List([]) -> ListType(ALPHATYPE())

  type-check-build-list:
    ListTail([h], t) -> <type-coerce-sym(type-coerce-full(fail))> (ListType(h-ty), t-ty)
    where
      t-ty := <type-check-build> t;
      h-ty := <type-check-build> h

  type-check-build-map:
    Map([]) -> MapType(ALPHATYPE(), ALPHATYPE())

  type-check-build-map:
    Map([Bind(k-t, v-t)]) -> MapType(k-ty, v-ty)
    where
      k-ty := <type-check-build> k-t;
      v-ty := <type-check-build> v-t
  
  type-check-build-map:
    MapExtend(map1, map2) -> <type-coerce-sym(type-coerce-full(fail))> (map1-ty, map2-ty)
    where
      map1-ty := <type-check-build> map1;
      map2-ty := <type-check-build> map2

  type-check-build-map:
    MapSelect(m-t, k-t) -> val-ty
    where
      map-ty@MapType(f-key-ty, val-ty) := <type-check-build> m-t;
      a-key-ty := <type-check-build> k-t;
      <type-coerce-full(fail)> (a-key-ty, f-key-ty)

  type-check-build-map:
    MapKeys(m-t) -> ListType(k-ty)
    where
      MapType(k-ty, _) := <type-check-build> m-t

  type-check-build-map:
    MapValues(m-t) -> ListType(v-ty)
    where
      MapType(_, v-ty) := <type-check-build> m-t

  type-check-build-map:
    MapHas(m-t, k-t) -> BoolType()
    where
      MapType(f-k-ty, _) := <type-check-build> m-t;
      a-k-ty := <type-check-build> k-t;
      <type-coerce-full(fail)> (a-k-ty, f-k-ty)

  type-check-build-cast:
    Cast(t, ty-t) -> cast-ty
    where
      t-ty := <type-check-build> t;
      cast-ty := <rw-type> ty-t

  type-check-build-nativefuncall:
    SortFunCall(fun-name, parent-t, param-t*) -> fun-ty
    where
      parent-ty := <type-check-build> parent-t;
      parent-def := <lookup-def(|Types())> parent-ty;
      NativeSort() := <lookup-prop(|SortKind())> parent-def;
      fun-def := <lookup-native-fun-def(|fun-name)> parent-def;
      FunctionType(fparam-ty*, fun-ty) := <lookup-prop(|Type())> fun-def;
      <zip(type-check-build-expect-wrap)> (fparam-ty*, param-t*)

  lookup-native-fun-def(|fun-name):
    parent-def -> <lookup-def(|NativeDTFun(parent-def))> fun-name
  
  lookup-native-fun-def(|fun-name):
    parent-def -> <lookup-native-fun-def(|fun-name)> sup-def
    where
      <not(lookup-def(|NativeDTFun(parent-def)))> fun-name
    where
      <lookup-prop(|NativeTypeSuperType()); lookup-def(|Types())> parent-def => sup-def;
      <lookup-prop(|SortKind())> sup-def => NativeSort()

rules // type rules for match-sides
  
  type-check-match(|in-ty) =
    type-check-match-helper(|in-ty)
    <+ type-err-match(|in-ty)
  
  type-check-match-helper(|in-ty) =
    type-check-match-num(|in-ty)
    <+ type-check-match-bool(|in-ty)
    <+ type-check-match-str(|in-ty)
    <+ type-check-match-wld(|in-ty)
    <+ type-check-match-var(|in-ty)
    <+ type-check-match-as(|in-ty)
    <+ type-check-match-con(|in-ty)
    <+ type-check-match-cast(|in-ty)
    <+ type-check-match-list(|in-ty)
  
  type-err-match(|in-ty):
  	t -> in-ty
  	where
  		in-ty-str := <pp-type> in-ty;
  		add-msg(|Error(), t, $[Expected [in-ty-str]])

  type-check-match-wrap:
    (in-ty, t) -> <type-check-match(|in-ty)> t
  
  type-check-match-num(|in-ty):
    Int(_) -> <type-coerce-full(id)> (in-ty, IntType())

  type-check-match-num(|in-ty):
    Real(_) -> <type-coerce-full(id)> (in-ty, RealType())
  
  type-check-match-bool(|in-ty):
    True() -> <type-coerce-full(id)> (in-ty, BoolType())

  type-check-match-bool(|in-ty):
    False() -> <type-coerce-full(id)> (in-ty, BoolType())
  
  type-check-match-str(|in-ty):
    String(_) -> <type-coerce-full(id)> (in-ty, StringType())
  
  type-check-match-wld(|in-ty):
    Wld() -> in-ty
  
  type-check-match-var(|in-ty):
    Var(v) -> ty
    where
      <not(lookup-def(|Vars()))> v;
      if scheme-def := <get-unique-matching-varscheme> v
      then
        scheme-ty := <lookup-prop(|Type())> scheme-def;
        ty := <type-coerce-full(id)> (in-ty, scheme-ty)
      else
        ty := in-ty
      end;
      v-def := <store-def(|Vars())> v;
      <store-prop(|Type(), v-def)> ty
  
  type-check-match-var(|in-ty):
    dec@Var(v) -> <fail>
    where
      <lookup-def(|Vars())> v;
      add-msg(|Error(), dec, $[Duplicate variable [<unrename-var> v]])
  
  type-check-match-as(|in-ty):
  	As(v, p) -> ty
  	where
  		<type-check-match(|in-ty)> v;
  		ty := <type-check-match(|in-ty)> p

  type-check-match-cast(|in-ty):
  	Cast(t, ty-trm) -> <type-coerce-full(id)> (in-ty, t-ty)
  	where
  		cast-ty := <rw-type> ty-trm;
  		t-ty := <type-check-match(|cast-ty)> t
  		
  type-check-match-con(|in-ty):
    t@Con(c, aparam*) -> <type-coerce-full(id)> (in-ty, ty)
    where
      c-def := <lookup-def(|Constructors())> (c, <length> aparam*);
      ConstructorType(fparam-ty*, ty) := <lookup-prop(|Type())> c-def;
      <zip(type-check-match-wrap)> (fparam-ty*, aparam*);
      if <not(InSource); lookup-prop(|ConsKind())> c-def => MetafunCons()
      then
        add-msg(|Error(), t, $[Cannot match against meta-function [c]])
      end
  
  type-check-match-list(|in-ty):
  	List([]) -> <type-coerce-full(id)> (in-ty, ListType(ALPHATYPE()))
  
  type-check-match-list(|in-ty):
  	ListTail([h], t) -> <type-coerce-full(id)> (in-ty, l-ty)
  	where
  		<?ListType(in-el-ty)> in-ty
    where
    	t-ty@ListType(t-el-ty) := <type-check-match(|in-ty)> t;
    	h-ty := <type-check-match(|in-el-ty)> h;
    	l-ty := <type-coerce-full(id)> (t-ty, ListType(h-ty))

rules
  
  type-check-premise-top =
  	type-check-premise
    <+
  	where(
  		?p;
  		p-str := <ensure(pp-dynsem-Premise-string)> p;
    	add-msg(|Error(), p, $[Premise type check failed: [p-str]])
  	)

  type-check-premise:
  	f@Formula(TermEq(lhs, rhs)) -> f
  	where
  	  <type-check-build> lhs; // TODO opportunity for type check
  	  <type-check-build> rhs

  type-check-premise:
    f@Formula(TermNeq(lhs, rhs)) -> f
    where
      <type-check-build> lhs; // TODO opportunity for type check
      <type-check-build> rhs

  type-check-premise:
    f@Formula(Match(lhs, rhs)) -> f
    where
      lhs-ty := <type-check-build> lhs;
      rhs-ty := <type-check-match(|lhs-ty)> rhs 
  
  type-check-premise:
  	f@Formula(NMatch(lhs, rhs)) -> f
  	where
  	  lhs-ty := <type-check-build> lhs;
  	  <type-check-match(|lhs-ty)> rhs

  type-check-premise:
  	f@Formula(Relation(Reads(r*), Source(lhs, sc*), arr, Target(rhs, tc*))) -> f
    where
      arrow-name := <get-arrow-name> arr;
      lhs-ty := <type-check-build> lhs;
    	if arrow-def := <lookup-def(|Arrows())> arrow-name
    	then
	      arrow-ty* := <lookup-props(|Type())> arrow-def;
	      if <type-of-applicable-arrow(flip(type-coerce-full(fail)))> (arrow-ty*, lhs-ty) => ArrowType(in-ty, out-ty)
	      then
	        <type-check-expectation(type-coerce-full(fail)|lhs, in-ty)> lhs-ty;
	        <type-check-match(|out-ty)> rhs;
	        <map(labelcomp-to-type-term-pair; type-check-build-expect-wrap)> [r*, sc*];
	        <map(labelcomp-to-type-term-pair; type-check-match-wrap)> tc*
	      else
	        arrow-ma-ty* := <map(?ArrowType(<id>, _))> arrow-ty*;
	        add-msg(|Error(), lhs, $[Expected one of: [<pp-type> arrow-ma-ty*] but found [<pp-type> lhs-ty]])
	      end
	    else
	      add-msg(|Error(), arrow-name, $[Arrow [arrow-name] is not declared])
	    end
      
  type-check-premise:
    f@Formula(TypeCast(r@VarRef(v-name), ty-term)) -> f
    where
      <rw-type> ty-term => ty;
      <lookup-def(|Vars())> v-name => v-def;
      <store-prop(|Use(), v-def)> r; 
      <lookup-prop(|Type())> v-def => v-ty;
      <store-prop(|Type(), v-def)> ty;
      if <not(type-coerce-full(id))> (ty, v-ty)
      then
        add-msg(|Warning(), f, $[Term might be uncoerceable to [<pp-type> ty]])
      end

  type-check-premise:
    f@Formula(TypeCheck(r@VarRef(v-name), ty-term)) -> f
    where
      <rw-type> ty-term => ty;
      <lookup-def(|Vars())> v-name => v-def;
      <store-prop(|Use(), v-def)> r; 
      <lookup-prop(|Type())> v-def => v-ty;
      if <not(type-coerce-full(id))> (ty, v-ty)
      then
        add-msg(|Warning(), f, $[Term might be uncoerceable to [<pp-type> ty]])
      end

  type-check-premise:
  	f@TryOr(PremiseBlock(l*), PremiseBlock(r*)) -> f
    with
      <map(type-check-premise-top)> l*;
      <map(type-check-premise-top)> r*

  type-check-premise:
    f@MergePoint(cond, PremiseBlock(l*), PremiseBlock(r*)) -> f
    with
    	<type-check-premise-top> cond;
      <map(type-check-premise-top)> l*;
      <map(type-check-premise-top)> r*
  
  type-check-premise:
    f@CaseMatch(tb, case*) -> f
    with
      in-ty := <type-check-build> tb;
      <map(type-check-case(|in-ty))> case*
      
  
  type-check-premise = ?AllFail()

  type-check-case(|in-ty):
    c@CaseOtherwise(prem*) -> c
    with
      <map(type-check-premise-top)> prem*
  
  type-check-case(|in-ty):
    c@CasePattern(pat, prem*) -> c
    with
      <type-check-match(|in-ty)> pat;
      <map(type-check-premise-top)> prem*

signature
  sorts
    CoercionMode
  
  constructors
    MatchMode: CoercionMode
    BuildMode: CoercionMode

rules
  
  type-coerce-full(is-matching) =
    type-coerce-base
    <+ type-coerce(type-coerce-full(is-matching))
    <+ type-coerce-implicit-wrap(is-matching, type-coerce-full(is-matching))
    
  type-coerce-direct(is-matching) =
    type-coerce-base
    <+ type-coerce(type-coerce-direct(is-matching))
  
  type-coerce-base = eq; Fst

  type-coerce-sym(coerce-s) =
    coerce-s
    <+ flip(coerce-s)
  
  type-coerce-base:
    (ty, ALPHATYPE()) -> ty
  
  type-coerce-base:
    (ALPHATYPE(), ty) -> ty

  type-coerce(coerce-s):
    (ty-from, ty-to) -> <coerce-s> (sup-ty, ty-to)
    where
      ty-from-def := <lookup-def(|Types())> ty-from;
      NativeSort() := <lookup-prop(|SortKind())> ty-from-def;
      sup-ty := <lookup-prop(|NativeTypeSuperType())> ty-from-def
  
  type-coerce(coerce-s):
    (ty-from, ty-to) -> <coerce-s> (<get-alias-base> ty-from, ty-to)
    where
      <is-alias> ty-from
  
  type-coerce(coerce-s):
    (ty-from, ty-to) -> <coerce-s> (ty-from, <get-alias-base> ty-to)
    where
      <is-alias> ty-to

  type-coerce(coerce-s):
    (ListType(ty-from), ListType(ty-to)) -> ListType(<coerce-s> (ty-from, ty-to))
  
  type-coerce(coerce-s):
    (IntType(), LongType()) -> LongType()

  type-coerce(coerce-s):
    (FloatType(), RealType()) -> RealType()

  type-coerce(coerce-s):
    (IntType(), FloatType()) -> FloatType()

  type-coerce(coerce-s):
    (IntType(), RealType()) -> RealType()

  type-coerce(coerce-s):
    (LongType(), RealType()) -> RealType()

  type-coerce(coerce-s):
    (MapType(a-k-ty, a-v-ty), MapType(t-k-ty, t-v-ty)) -> MapType(k-ty, v-ty)
    where
      k-ty := <coerce-s> (a-k-ty, t-k-ty);
      v-ty := <coerce-s> (a-v-ty, t-v-ty)

rules /* support for implicit conversions */
  
  type-coerce-implicit-wrap(is-matching, coerce-s):
    ty-tup@(_, _) -> <type-path-get-out-ty(is-matching)> ty-step*
    where
      ty-step* := <type-coerce-implicit(is-matching, coerce-s)> ty-tup
  
  type-coerce-implicit(is-matching, coerce-s):
    (ty-from, ty-to) -> <get-typath-memo(coerce-s)> (ty-from, ty-to, mode)
    where
      is-matching
      < mode := MatchMode()
      + mode := BuildMode()

  // initialize the memo table with the implicit constructors and arrows as paths
  prime-typaths =
    lookup-def-all(|Constructors());
    filter(where(lookup-prop(|ConsKind()) => ImplicitCons()));
    map(store-prime-conspath);
    lookup-def-all(|Arrows());
    map(store-prime-arrowpath)
  
  store-prime-conspath:
    c-def -> c-def
    where {in-ty, out-ty, c-ty:
      <lookup-prop(|Type())> c-def => c-ty@ConstructorType([in-ty], out-ty);
      rules(
        MemoTyPath: (in-ty, out-ty, BuildMode()) -> [(c-def, c-ty)]
        MemoTyTrans:+ (in-ty, BuildMode()) -> out-ty

        MemoTyPath: (out-ty, in-ty, MatchMode()) -> [(c-def, c-ty)]
        MemoTyTrans:+ (out-ty, MatchMode()) -> in-ty
      )
    }

  store-prime-arrowpath:
    a-def -> a-def
    where
      <lookup-props(|Type())> a-def;
      map({in-ty, out-ty, a-ty, tmp-out-ty:
        ?a-ty@ArrowType(in-ty, out-ty);
        {out-ty-def, extra-out-ty:
          // HACK: to handle arrows reducing into an alias
	        if 
	          out-ty-def := <lookup-def(|Types())> out-ty;
	          <lookup-prop(|SortKind())> out-ty-def => AliasSort()
	        then
	          extra-out-ty := <get-alias-base> out-ty;
	          rules(
		          MemoTyPath: (in-ty, extra-out-ty, BuildMode()) -> [(a-def, a-ty)]
		          MemoTyPath: (in-ty, extra-out-ty, MatchMode()) -> [(a-def, a-ty)]
		          MemoTyTrans:+ (in-ty, BuildMode()) -> extra-out-ty
		          MemoTyTrans:+ (in-ty, MatchMode()) -> extra-out-ty
		        )
	        end
	        // END HACK
        };
        rules(
          MemoTyPath: (in-ty, out-ty, BuildMode()) -> [(a-def, a-ty)]
          MemoTyPath: (in-ty, out-ty, MatchMode()) -> [(a-def, a-ty)]
          MemoTyTrans:+ (in-ty, BuildMode()) -> out-ty
          MemoTyTrans:+ (in-ty, MatchMode()) -> out-ty
        )
      })

  get-typath-memo(coerce-strategy):
    t@(ty-from, ty-to, mode) -> path*
    where
      <MemoTyPath> t => ans
      <
        hit;
        if <?[_ | _]> ans
        then
          path* := ans
        end // in the else case, we have a cached failure and we fail by not binding path*
      +
        miss;
        if <get-typath(coerce-strategy)> t => path*
        then
          rules(
            MemoTyPath: t -> path*
            MemoTyTrans:+ (ty-from, mode) -> ty-to
          )
        else
          rules(
            MemoTyPath: t -> None()
          )
        end

  get-typath(coerce-strategy):
    t@(ty-from, ty-to, mode) -> path*
    where
    	anti-cycle(
        <bagof-MemoTyTrans> (ty-from, mode) => ty-inter*;
        ty-inter := <fetch-elem(where(\ ty -> <coerce-strategy> (ty, ty-to) \))> ty-inter*;
        path1* := <get-typath-memo(coerce-strategy)> (ty-from, ty-inter, mode);
        path2* := <get-typath-memo(coerce-strategy)> (ty-inter, ty-to, mode);
        path* := [path1*, path2*]
      )
  
  type-path-get-in-ty(is-matching):
    [(step-def, step-def-ty) | _] -> in-ty
    with
      switch <def-get-namespace> step-def
        case ?Constructors():
          if is-matching
          then
            ConstructorType([in-ty], _) := step-def-ty
          else
            ConstructorType([in-ty], _) := step-def-ty
          end
        case ?Arrows():
          ArrowType(in-ty, _) := step-def-ty
      end

  type-path-get-out-ty(is-matching):
    ty-step* -> out-ty
    with
      (step-def, step-def-ty) := <last> ty-step*;
      switch <def-get-namespace> step-def
        case ?Constructors():
          if is-matching
          then
            ConstructorType([out-ty], _) := step-def-ty
          else
            ConstructorType(_, out-ty) := step-def-ty
          end
        case ?Arrows():
          ArrowType(_, out-ty) := step-def-ty
      end

  type-path-to-string(is-matching):
    [] -> ""
  
  type-path-to-string(is-matching):
  	[step | xs-steps] -> <conc-strings> ("<br>", step-string, xs-string)
  	where
  		step-string := <type-path-step-to-string(is-matching)> step;
  		xs-string := <type-path-to-string(is-matching)> xs-steps
  
  type-path-step-to-string(is-matching):
  	(cons-def, ConstructorType([in-ty], out-ty)) -> $[[<pp-type> out-ty] => [cons-name]([<pp-type> in-ty])]
  	where
  		is-matching;
      cons-name := <consdef-get-name> cons-def

  type-path-step-to-string(is-matching):
  	(cons-def, ConstructorType([in-ty], out-ty)) -> $[[cons-name]([<pp-type> in-ty]) => [<pp-type> out-ty]] 
    where
      not(is-matching);
      cons-name := <consdef-get-name> cons-def;
      cons-arity := <consdef-get-arity> cons-def

  type-path-step-to-string(is-matching):
  	(arrow-def, ArrowType(in-ty, out-ty)) -> $[[<pp-type> in-ty] -[arrow-name]-> [<pp-type> out-ty]]
  	where
  		arrow-name := <def-get-name> arrow-def

rules /* utilities */

  anti-cycle(s) = {| AntiCycle:
    ?t;
    not(AntiCycle);
    rules(AntiCycle:+ t -> t);
    s
  |}

  init-hitcount = rules(HitStats: _ -> (0, 0))
  
  get-hitcount = HitStats
  
  log-hitcount = 
    where(
      get-hitcount => (hits, misses);
      <concat-strings> [ <align-left> (' ', "Memoization efficiency", 27), " : [hits/misses] = [", <int-to-string> hits, "/", <int-to-string> misses, "]" ];
      log(|Info(),<id>)
    )
  
  hit =
    HitStats => (hits, misses);
    hits' := <inc> hits;
    rules(HitStats: _ -> (hits', misses)) 

  miss =
    HitStats => (hits, misses);
    misses' := <inc> misses;
    rules(HitStats: _ -> (hits, misses'))
