module analysis/rename

imports
  signatures/ds-sig
  ds
  analysis/lib-analysis
  analysis/constructors
  import-utils
  
strategies
	
	rename-all = alltd(rename)
	
rules
  
  rename:
    Rule(p*, i, r) -> Rule(p'*, i, r')
    where
      new-scope-renames(
        r' := <rename-all-vars> r;
        p'* := <rename-all-vars> p*
      )
  
  rename-all-vars = alltd(origin-track-forced(rename-var))
  
  rename-var:
  	TryOr(l, r) -> TryOr(l', r')
  	where
  	  new-scope-renames(
        l' := <rename-all-vars> l
      );
      new-scope-renames(
        r' := <rename-all-vars> r
      )
  
  rename-var:
    MergePoint(p, l, r) -> MergePoint(p', l', r')
    where
      new-scope-renames(
        p' := <rename-all-vars> p;
        l' := <rename-all-vars> l
      );
      new-scope-renames(
        r' := <rename-all-vars> r
      )

  rename-var:
    CasePattern(pat, p*) -> CasePattern(pat', p'*)
    where
      new-scope-renames(
        pat' := <rename-all-vars> pat;
        p'* := <rename-all-vars> p*
      )
  
  rename-var:
    CaseOtherwise(p*) -> CaseOtherwise(p'*)
    where
      new-scope-renames(
        p'* := <rename-all-vars> p*
      )
  
  rename-var:
  	VarRef(v) -> VarRef(<rename(|Vars())> v)
  
  rename-var:
  	Var(v) -> Var(<rename(|Vars())> v)
  
rules

  unrename-all = alltd(unrename-var)

  unrename-var:
  	v -> <invrename(|Vars())> v
  	where
  		is-string

  unrename-var:
    VarRef(v) -> VarRef(<unrename-var> v)

  unrename-var:
    Var(v) -> Var(<unrename-var> v)

