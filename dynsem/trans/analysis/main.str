module analysis/main

imports
	ds2ds/sugar
	analysis/rename
	analysis/lib-analysis
	analysis/analysis-signatures
	analysis/analysis-rules
	analysis/mark-references
	analysis/query
	analysis/info-implicit-conversions
	signatures/ds-sig
	signatures/dynsem/-
  lib-ds
	libstratego-sglr
	libspoofax/stratego/dynrule
	libspoofax/core/language
	libspoofax/resource/path
	libspoofax/resource/cache
	ds
	pp

rules

  debug-show-analyzed:
    (_, _, ast, path, project-path) -> (filename, result)
    with {| MyCurrentFile, OptFilePath:
      filename := <guarantee-extension(|"analyzed.ds")> path;
      f-path := $[[project-path]/[path]];
      rules(MyCurrentFile: _ -> f-path);
      rules(OptFilePath: _ -> path);
      reset-dynamic-rules;
      result := <in-project-path(m-in-analysis(id)|project-path); unmark-vars; sugar-all; pp-debug> ast
    |}
      
rules

  m-in-analysis(s) =
    new-analysis-scope(
      in-rename-scope(
        new-type-transitions-scope(
          analyze-top;
          s
        )
      )
    )
	
  analyze-top:
    ast@Module(module-name, _) -> <analyze-module> ast
    with
      // compute the transitive closure set of imports
      analyze-api-get-all-imports(editor-import-resolution-error, editor-import-parse-error);
      // remove the current file from the imports
      filter(not(?Import(module-name)));
      // analyze the signatures of each module
      map(try(analyze-import))

strategies // analysis workhorse

  analyze-import =
    open-cached-file(analyze-api-resolve-import(id), parse-ds-file-report(id));
    Module(id, filter(?Signatures(_)));
    analyze-module

  analyze-module =
    desugar-top;
    mark-vars;
    rename-all;
    store-all
  
  store-all:
    m@Module(n, section*) -> m
    with
      store-built-ins;
      <map(try(store-signatures))> section*;
      <check-signatures> m;
      <store-rules-all> section*;
      <post-analysis-checks> m;
      <gen-implicit-info-top> m

strategies // import resolution

  analyze-api-get-all-imports(resolution-error, parse-error) =
    ?ast;
    direct-import* := <analyze-api-get-direct-imports; nub> ast;
    <analyze-compute-imports(resolution-error, parse-error)> (direct-import*, [])
  
  analyze-api-get-direct-imports:
    Module(_, sec*) -> <filter(?Imports(<id>)); concat> sec*
  
  analyze-compute-imports(resolution-error, parse-error):
    ([], impo*) -> impo*
  
  analyze-compute-imports(resolution-error, parse-error):
    ([impX|impXs], imp*) -> <analyze-compute-imports(resolution-error, parse-error)> (<nub> [new-imp*|impXs], [impX, imp*])
    with
      if ast := <open-cached-file(analyze-api-resolve-import(resolution-error), parse-ds-file-report(\ _ -> <parse-error> impX \))> impX
      then
        more-imp* := <analyze-api-get-direct-imports> ast;
        new-imp* := <diff> (more-imp*, imp*)
      else
        new-imp* := []
      end
  
  analyze-api-resolve-import(resolution-error):
    Import(m) -> <resolve-path(resolution-error)> m

rules /* helpers for import handling */

  resolve-path(resolution-error) =
  	?import-string;
    (
      language; language-source-and-include-directories;
      fetch-elem(!$[[<id>]/[import-string].ds]; file-exists)
      <+
      resolution-error;
      fail
    )

  parse-ds-file-report(report) = 
    parse-ds
    <+ report; fail
  
  parse-ds:
    file -> str
    where
      str := <prim("STRSGLR_parse_string", id|file, (), (), file)>
  
  editor-import-parse-error:
    t@Import(import-string) -> t
    with
      add-msg(|Error(), t, $[Imported module [import-string] cannot be be parsed])

  console-import-parse-error =
    ?Import(<id>);
    fatal-err(|"Cannot read/parse module: ") 

  editor-import-resolution-error:
    s -> s
    where
      add-msg(|Error(), s, $[Import [s] cannot be resolved])
  
  console-file-not-found-error =
    fatal-err(|"File not found: ")

strategies // caching file reading utilities
  
  open-cached-file(resolve-path, parse-file) =
    open-cached-file(resolve-path, parse-file, ?result);
    !result
  
  open-cached-file(resolve-path, parse-file, record-declarations):
    import -> file
    where
      path       := <resolve-path> import;
      cache-path := <import-cache-path> path;
      ( <file-is-newer> (cache-path, path);
        file := <ReadFromFile> cache-path
      <+
        file := <parse-file> path;
        if <file-exists> path then
          // Only cache if on filesystem (e.g., ignore libstratego-lib)
          <try(WriteToBinaryFile)> (cache-path, file)
        end        
      );
      {| CurrentFile:
        rules(CurrentFile := path);
        <record-declarations> file
      |}
