module analysis/main

imports
	ds2ds/sugar
	analysis/rename
	analysis/lib-analysis
	analysis/analysis-signatures
	analysis/analysis-rules
	analysis/mark-references
	analysis/query
	analysis/info-implicit-conversions
	signatures/-
  lib-ds
	libstratego-sglr
	ds
	import-utils

rules

  m-in-analysis(s) =
    new-analysis-scope(
      new-type-transitions-scope(
        analyze-top;
        s
      )
    )
	
	analyze-top = {| IsImported:
	  where(
		  if f := <MyCurrentFile>
		  then
	  	  rules(IsImported: f)
	  	end);
	  analyze-module
  |}

  analyze-module =
    analyze-imports(analyze-module);
    analyze-module-local
  
  analyze-imports(analysis) =
    Module(id, where(filter(Imports(filter(analyze-import(analysis))))))
  
  analyze-import(analysis) = 
  	?t@Import(import-string);
  	!import-string;
  	open-import(
  	  resolve-path,
      parse-ds-file-report(add-msg(|Error(), t, $[Import [import-string] cannot be be parsed]));
  	  Module(id, filter(?Imports(_) <+ ?Signatures(_))),
  	  analyze-module
  	)

  analyze-module-local =
	    desugar-top;
	    log-timed(mark-vars| "Marking variable def sites");
	    log-timed(rename-all| "Renaming variables");
	    log-timed(store-all| "Storing all definitions")
  
  store-all:
    m@Module(n, section*) -> m
    with
      log-timed(
        log-timed(
          store-built-ins | "Storing built-in signatures"
        );
        log-timed(
          <map(try(store-signatures))> section* | "Storing signatures"
        );
        log-timed(
          <check-signatures> section* | "Checking signatures" 
        );
        log-timed(
          <store-rules-all> section* | "Storing rules"
        );
        log-timed(
          <post-analysis-checks> m | "Post-analysis checks"
        );
        log-timed(
          <gen-implicit-info-top> m | "Implicit conversion info"
        )
      | "Analysis" )
  
rules /* helpers for import handling */

  resolve-path =
  	?import-string;
    (
      !"ds"; language-source-and-include-locations;
      fetch-elem(!$[[<id>]/[import-string].ds]; file-exists)
      <+
      add-msg(|Error(), import-string, $[Import [import-string] cannot be resolved]);
      fail
    )

  parse-ds-file-report(report) = 
    parse-ds
    <+ debug(!"failed to parse: "); report; debug(!"reported error: "); fail
