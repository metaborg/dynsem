module backend/java-backend/emit-genericnodes

imports
  signatures/ds-sig
  libjava-front
  
imports
  analysis/constructors
  analysis/analysis-signatures
  analysis/lib-analysis

imports
  backend/java-backend/utils
  backend/java-backend/analysis-extra
  backend/java-backend/lib-ds2java
  backend/java-backend/emit-arrows
  backend/java-backend/emit-maputils

rules
  
  ds2java-genericnodes:
    Module(_, _) -> <map(def-get-name; ds2java-genericnode)> def-ty* 
    where
      def-ty* := <lookup-def-all(|Types()); filter(where(lookup-prop(|SortKind()) => LanguageSort()))>

  ds2java-genericnode:
    ty -> 
      compilation-unit |[ 
        package ~x:<AutoPackageName>;
        
        import java.util.Objects;
        import org.metaborg.meta.interpreter.framework.*;
        import org.spoofax.interpreter.terms.*;
        import com.oracle.truffle.api.frame.*;
        import com.oracle.truffle.api.nodes.*;
        import com.oracle.truffle.api.source.*;
        
        public class ~x:gennodename extends ~x:sortname implements IGenericNode {
          
          private IStrategoTerm aterm;
          
          public ~x:gennodename(SourceSection src, IStrategoTerm term) {
            super(src);
            Objects.requireNonNull(term);
            this.aterm = term;
          }
          
          @Override
          public <T> T match(Class<T> clazz) {
            return specialize().match(clazz);
          }
          
          @Override
          public ~x:sortname specialize() {
            if (aterm instanceof IStrategoAppl) {
              final IStrategoAppl term = (IStrategoAppl) aterm;
              final String name = term.getName();
              final SourceSection source = SourceSectionUtil.fromStrategoTerm(term);
              
              ~bstm*:<mapconcat(ds2java-consdecl-specializer)> [c-def*, impl-c-def*]
            }

            ~bstm*:<foldr(![], ds2java-implcons-specializer)> impl-c-def*
            
            throw new MalformedASTException(aterm.toString());
            
          }
          
          @Override
          public IStrategoTerm toStrategoTerm(ITermFactory factory) {
            return aterm;
          }

          ~exec*

        }
      ]|
    where
      sortname := <ds2java-type-to-identifier> ty;
      gennodename := $[Generic_[sortname]];
      c-def* := <lookup-def-all(|Constructors()); filter(where(lookup-prop(|Type()) => ConstructorType(_, ty)); where(lookup-prop(|ConsKind()) => LanguageCons()))>;
      impl-c-def* := <lookup-def-all(|Constructors()); filter(where(lookup-prop(|Type()) => ConstructorType(_, ty)); where(lookup-prop(|ImplicitCons()) => ImplicitCons()))>;
      exec* := <lookup-applicable-arrow-def; map(ds2java-arrow-specializedispatch)> ty

  ds2java-consdecl-specializer:
  	c-def ->
			bstm* |[
			  if(name.equals(~e:Lit(String([Chars(<escape> c-name)]))) && term.getSubtermCount() == ~i:<int-to-string> c-arity) {
			    ~x:sortname replacement = new ~x:consname(source, e*);
			    return replacement;
		    }
			]|
    where
      c-name := <consdef-get-name> c-def;
      c-arity := <consdef-get-arity> c-def;
      ConstructorType(c-c-ty*, c-ty) := <lookup-prop(|Type())> c-def;
      sortname := <ds2java-type-to-unboxed-type> c-ty;
      consname := <ds2java-consdef-classname> c-def;
      e* := <map-with-index((\ idx -> e |[ term.getSubterm(~i:<dec; int-to-string> idx)]| \, id); ds2java-gennode-instantiation)> c-c-ty*
  
  subterm-at-index:
    idx -> e |[ term.getSubterm(~i:<int-to-string> idx) ]|

  ds2java-gennode-instantiation:
    (e_trm, ty) -> e |[ new ~x:gennodename(SourceSectionUtil.fromStrategoTerm(e_trm), e_trm).specialize() ]|
    where
      not(!ty => ListType(_));
      ty-def := <lookup-def(|Types())> ty;
      <not(lookup-prop(|SortKind()) => SystemSort())> ty-def;
      <not(lookup-prop(|SortKind()) => NativeSort())> ty-def;
      gennodename := $[Generic_[<ds2java-type-to-identifier> ty]]

  ds2java-gennode-instantiation:
    (e_trm, lty@ListType(e-ty)) -> e |[ x_listname.fromStrategoTerm(e_trm) ]|
    where
      x_listname := <ds2java-type-to-unboxed-type> lty
  
  ds2java-gennode-instantiation:
    (e_trm, m-ty@MapType(_, _)) -> e |[ AutoMapUtils.x_tosemcomp(e_trm) ]|
    where
      x_tosemcomp := <ds2java-aterm2map-name> m-ty
 
  ds2java-gennode-instantiation:
  	(e_trm, ty) -> e |[ null ]|
  	where
  		ty-def := <lookup-def(|Types())> ty;
  		<lookup-prop(|SortKind())> ty-def => NativeSort()
 
  ds2java-gennode-instantiation:
    (e_trm, StringType()) -> e |[ TermUtils.stringFromTerm(e_trm) ]|

  ds2java-gennode-instantiation:
    (e_trm, IntType()) -> e |[ TermUtils.intFromTerm(e_trm) ]|

  ds2java-gennode-instantiation:
    (e_trm, LongType()) -> e |[ TermUtils.longFromTerm(e_trm) ]|

  ds2java-gennode-instantiation:
    (e_trm, RealType()) -> e |[ TermUtils.doubleFromTerm(e_trm) ]|
  
  ds2java-gennode-instantiation:
    (e_trm, BoolType()) -> e |[ TermUtils.boolFromTerm(e_trm) ]|

  ds2java-implcons-specializer:
  	(impl-c-def, bstm*) -> bstm* |[
  	  try {
  	    return new x_implconsname(this.getSourceSection(), e_gennode);
  	  } catch(MalformedASTException ~x:<newname>) {
  	    bstm*
  	  }
  	]|
  	where
  	  ConstructorType([c-ty], _) := <lookup-prop(|Type())> impl-c-def;
  	  x_implconsname := <ds2java-consdef-classname> impl-c-def;
  	  e_gennode := <ds2java-gennode-instantiation> (e |[ aterm ]|, c-ty)

  ds2java-arrow-specializedispatch:
    (arrow-def, ArrowType(_, bu-ty)) ->
      class-body-dec |[
        public ~x:<ds2java-returnclassname> (arrow-def, bu-ty) ~x:execname(VirtualFrame frame, param*){
        	return specialize().~x:execname(frame, e*);
        }
      ]|
    where
      execname := <ds2java-methodname> (arrow-def, bu-ty);
      param* := <lookup-arrow-inputs; map-with-index(ds2java-method-paramdecl)> arrow-def;
      e* := <lookup-arrow-inputs; map-with-index(\ (idx, _) -> e |[ ~x:$[_[idx]] ]| \)> arrow-def


