module backend/meta-interpreter/entrypoint

imports
  backend/common/-
  libjava-front
  
rules

  ds-backend-metainterp-langmain-top = 
    ds-backend-metainterp-langmain; MkSingleton; ds-to-interp-write-classes(|<get-opt> TopPkg())

  ds-backend-metainterp-langmain =
    x_entrypoint := $[[<get-opt> LangName()]Main];
    !compilation-unit |[
      package ~x:<get-opt> TopPkg();
  
      import java.io.File;
      import java.io.InputStream;
      
      import org.apache.commons.io.FilenameUtils;
      import org.metaborg.meta.lang.dynsem.interpreter.DynSemLanguageParser;
      import org.metaborg.meta.lang.dynsem.interpreter.IDynSemLanguageParser;
      import org.metaborg.meta.lang.dynsem.interpreter.terms.ITerm;
      import org.spoofax.interpreter.terms.IStrategoTerm;
      import org.spoofax.terms.TermFactory;
      import org.spoofax.terms.io.TAFTermReader;
      
      import com.oracle.truffle.api.source.Source;
      
      import dynsem.metainterpreter.natives.MetaDSMain;
      
      public class x_entrypoint {
        public final static String PARSE_TABLE = ~e:Lit(String([Chars(<get-opt> TargetTableRel())]));
        public final static String START_SYMBOL = ~e:Lit(String([Chars(<get-opt> StartSymbol())]));
        public final static String SPEC_FILE = ~e:Lit(String([Chars(<get-opt> TargetSpecRel())]));
        public final static String MIME_TYPE = ~e:Lit(String([Chars(<get-opt> MimeType())]));
      
        public static void main(String[] args) throws Exception {
          String filePath = args[0];
          Source programSource = Source.newBuilder(new File(filePath)).build();
          IStrategoTerm programTerm = createParser().parse(programSource);
      
          TAFTermReader specReader = new TAFTermReader(new TermFactory());
          IStrategoTerm specTerm = specReader.parseFromStream(getSpecificationTerm());
          ITerm result = MetaDSMain.evaluate(programTerm, specTerm);
          System.out.println(result);
        }
      
        private static IDynSemLanguageParser createParser() {
          return new DynSemLanguageParser(
              x_entrypoint.class.getClassLoader().getResourceAsStream(FilenameUtils.getName(PARSE_TABLE)), START_SYMBOL);
        }
      
        private static InputStream getSpecificationTerm() {
          return x_entrypoint.class.getClassLoader().getResourceAsStream(FilenameUtils.getName(SPEC_FILE));
        }
      }
    ]|