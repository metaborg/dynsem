module backend/utils/utils

imports
  libjava-front

rules
  
  external read-property(|propname, defaultval)
  
  external fmakeexecutable(|)
  
  external digest-term(|)
  
rules

  ds-utils-java-emit-classes(createdir|outputpkg, basedir) =
    map(ds-utils-java-emit-class(createdir|outputpkg, basedir))
  
  ds-utils-java-emit-class(createdir|outputpkg, basedir) =
    ?ast;
    debug(!"emit1 ");
    filename := <ds-utils-java-extractname; guarantee-extension(|"java")> ast;
    debug(!"emit2 ");
    if createdir then
      debug(!"emit3 ");
      outputdir := <concat-strings> [basedir, "/", <string-replace(|".", "/")> outputpkg];
      debug(!"emit4 ");
      (<file-exists <+ mkdir> outputdir)
      ;debug(!"emit5 ")
    else
      debug(!"emit6 ");
      outputdir := basedir
      ;debug(!"emit7 ")
    end;
    debug(!"emit8 ");
    filepath := <concat-strings> [outputdir, "/", filename];
    <debug(!"EMIT: ")> filepath;
    pp-java := <ds-utils-debugged-java-pp> ast;
    fout     := <fopen> (filepath, "w");
    <fputs> (pp-java, fout);
    <fclose> fout
  
  ds-utils-java-extractname:
    compilation-unit -> name
    with
      <collect-one(?InterfaceDecHead(_, Id(name), _, _) + ?ClassDecHead(_, Id(name), _, _, _))> compilation-unit
  
  ds-utils-java-escape-id = string-replace(|"'", "_"); string-replace(|"-", "_")
  
  ds-utils-debugged-java-pp =
    pp-java-string <+
    bottomup(try(not(is-string) ; not(is-list) ; not(pp-java-string) ; debug(!"ERROR: cannot pp "))) ; fail
  
  mkidx:
    idx -> $[_[idx]]
  
