module backend/interpreter/tuples/terms

imports
  signatures/-
  signatures/dynsem/-
  backend/common/-
  backend/interpreter/-

strategies

  ds-to-interp-terms-tupledecls =
    map(require(ds-to-interp-terms-tupledecl, debug-decl-name|"Tuple term generation failed for"))

rules

  ds-to-interp-terms-tupledecl:
    srt@TupleSort(c-ty*) ->
      compilation-unit |[
        package ~x:<get-opt> TermPkg();
        
        import org.spoofax.interpreter.core.Tools;
        import org.spoofax.interpreter.terms.*;
        import ~x:<get-opt> NativePkg().*;
        import com.oracle.truffle.api.CompilerAsserts;
        import com.oracle.truffle.api.CompilerDirectives.TruffleBoundary;
        import org.metaborg.meta.lang.dynsem.interpreter.terms.concrete.TupleTerm;
        
        public final class x_classname {

          public final static int ARITY = ~i:<length; int-to-string> c-ty*;
          

          ~mcreate0*

        }
      ]|
    where
      x_classname := <jclass-term> srt;
      param0* := <ds-to-interp-sorts-to-params> c-ty*;
      bstm0* := <ds-to-interp-sorts-to-finits> c-ty*;
      fdec0* := <ds-to-interp-sorts-to-fdecs> c-ty*;
      fget0* := <ds-to-interp-sorts-to-fgets> c-ty*;
      e0* := <range; map(\ i -> e |[ ~x:<int-to-string; mkidx> ]| \)> (1, <length; inc> c-ty*);
      bstm2* := <map-with-index(ds2java-field-eq-check)> c-ty*;
      e_hash := <foldr(!e |[ new HashCodeBuilder() ]|, ds-to-interp-hashcode-append)> <range> (1, <length; inc> c-ty*);
      bstm3* := <map-with-index(Fst; !bstm |[ sb.append(~x:<int-to-string; mkidx>); ]|); separate-by(|bstm |[ sb.append(", "); ]|)> c-ty*
    where
      if <is-value-sort> srt
      then
        mcreate0* := class-body-dec* |[
            @TruffleBoundary
            public static TupleTerm create(IStrategoTerm term) {
              throw new IllegalStateException("Tuples of value terms cannot be created from Stratego terms");
            }
        ]|
      else
        e1* := <map-with-index((\ i -> e |[ term.getSubterm(~i:<dec; int-to-string>) ]| \, id); ds-to-interp-sorts-to-create-arg)> c-ty*;
        sort-string := <string-type> srt;
        mcreate0* := class-body-dec* |[
            @TruffleBoundary
            public static TupleTerm create(IStrategoTerm term) {
              CompilerAsserts.neverPartOfCompilation();
              assert term != null;
              assert Tools.isTermTuple(term);
              assert term.getSubtermCount() == ARITY;
              return new TupleTerm(~e:Lit(String([Chars(sort-string)])), new Object[] { e1* }, term);
            }
        ]|
      end
    where
      finit* := class-body-dec* |[
        public x_classname(param0*) {
          this(e0*, null);
        }
        
        private x_classname(param0*, IStrategoTerm strategoTerm) {
          bstm0*
          this.strategoTerm = strategoTerm;
        }
      ]|

rules // creation from aterms

  ds-to-interp-sorts-to-create-arg:
    (e_term, ts@TupleSort(_)) -> e |[ ~x:<jclass-term> ts.create(e_term) ]|
