module backend/interpreter/desugar-for-interpreter

imports
  signatures/-
  backend/interpreter/-
  backend/interpreter/lists/names
  analysis/-
  ds2ds/explicate-arrow-types
  ds2ds/more-typeannos
  ds2ds/desugar-concat
  ds2ds/abruptions/abruptions
  ds2ds/nativeloops/nativeloops
  ds

rules

  desugar-for-interpreter-module:
    m@Module(_, _) -> Module($[[name]_interp], section*)
    where
      <m-in-analysis(desugar-for-interpreter; unrename-all); unmark-vars> m => Module(name, section*)

  desugar-for-interpreter =
    explicate-arrow-types-noanalysis
    ; add-rulekind-flags-module
    ; clone-list-rules-module
    ; loops-rewrite-natives-module
    ; abr-rewrite-natives-module
    ; desugar-semantic-components
//    ; mark-rule-arguments
    ; desugar-natives
    ; desugar-list-reductions
//    ; desugar-rec-tco
    ; desugar-unquote-strings
    ; desugar-nmatch-neq
    ; desugar-concat-all
    ; resugar-and-typecast-lists
    ; jtype-lists
    ; counted-while-loops

rules

  add-rulekind-flags-module =
    m-in-analysis(add-rulekind-flags; unrename-all) 
  
  add-rulekind-flags = alltd(add-rulekind-flags-rule)
  
  add-rulekind-flags-rule:
    Rule(p*, infer, relation) -> Rule(p*, infer, relation, kindflag, dispatchClass)
    where
      (kindflag, dispatchClass) := <get-relation-kind-class> relation
  
  get-relation-kind-class:
    Relation(_, Source(srcpattern, _), arrow, _) -> <get-relation-kind-class> srcpattern
  
  get-relation-kind-class:
    As(_, t) -> <get-relation-kind-class> t
  
  get-relation-kind-class:
    con@Con(c, k*) -> (TermKind(), <jclass-term-qual> con)
  
  get-relation-kind-class:
    Cast(_, srt@SimpleSort(s)) -> (SortKind(), <jclass-term-qual> srt)
    where <not(type-is-builtin)> s

  get-relation-kind-class:
    Cast(_, ss@SimpleSort("AST")) -> (ASTKind(), <jclass-term-qual> ss)
  
  get-relation-kind-class:
    Cast(_, ss@SimpleSort("String")) -> (PrimitiveKind(), <jclass-term-qual> ss)

  get-relation-kind-class:
    Cast(_, ss@SimpleSort("Int")) -> (PrimitiveKind(), <jclass-term-qual> ss)

  get-relation-kind-class:
    Cast(_, ss@SimpleSort("Bool")) -> (PrimitiveKind(), <jclass-term-qual> ss)

  get-relation-kind-class:
    Cast(_, MapSort(_, _)) -> (MapKind(), "MAP REDUCTION NOT SUPPORTED")
  
  get-relation-kind-class:
    Cast(_, srt@ListSort(_)) -> (ListKind(), [<jclass-term-list-nil-qual> srt, <jclass-term-list-cons-qual> srt])
  
  get-relation-kind-class:
    Cast(_, srt@TupleSort(_)) -> (TupleKind(), <jclass-term-qual> srt)

rules /* clone list rules */

  clone-list-rules-module = oncetd(Rules(map(clone-list-rule); concat))
  
  clone-list-rule:
    Rule(p*, infer, relation, ListKind(), [nil-dispatch, cons-dispatch]) -> [
      Rule(p*, infer, relation, ListKind(), nil-dispatch),
      Rule(p*, infer, relation, ListKind(), cons-dispatch)
    ]
  
  clone-list-rule:
    r@Rule(_, _, _, kind, _) -> [r]
    where <not(?ListKind())> kind

rules /* rename arguments */

//  mark-rule-arguments = alltd(?Rule(_, _, _, _, _); mark-rule-arguments-rule)
//  
//  mark-rule-arguments-rule:
//    Rule(prem*, infer, Relation(Source(lhs, rw*), arrow, target), kind, class)
//      -> Rule(prem'*, infer, Relation(Source(lhs', rw*), arrow, target'), kind, class)
//    with {| RenameArgument, NextArgument:
//      rules(NextArgument: _ -> 1);
//      lhs' := <try(mark-rule-arguments-bind-source)> lhs;
//      prem'* := <alltd(mark-rule-arguments-read)> prem*;
//      target' := <alltd(mark-rule-arguments-read)> target
//    |}
//
//  mark-rule-arguments-bind-source:
//    Cast(var@Var(v), l@ListSort(_)) -> Cast(ArgBind(0), l)
//    where
//      rules(RenameArgument: VarRef(v) -> ArgRead(0){var})
//
//  mark-rule-arguments-bind-source:
//    As(var@Var(v), source) -> source
//    where
//      rules(RenameArgument: VarRef(v) -> ArgRead(0){var})
//
//  mark-rule-arguments-read = RenameArgument
//
//  type-of:
//    ArgRead(i){v} -> <type-of> v

rules /* native operators */

  desugar-natives = innermost(desugar-native-ops + desugar-native-types)

  desugar-native-ops:
    Con(c, k*) -> NativeOp(c, k*)
    where
      <lookup-def(|Constructors()); lookup-prop(|ConsKind())> (c, <length> k*) => NativeOpCons()

  desugar-native-types:
    SimpleSort(s) -> NativeType(s, ty-str)
    where
      ty-def := <lookup-def(|Types())> s;
      NativeSort() := <lookup-prop(|SortKind())> ty-def;
      ty-str := <lookup-prop(|JClass()); unquote(?'"')> ty-def

  desugar-native-types:
    SortFunCall(name, recv, arg*) -> NativeFunCall(<type-of> recv, name, recv, arg*)
  
  type-of:
    NativeOp(c, k*) -> ty
    where
      ConstructorType(_, ty) := <lookup-def(|Constructors()); lookup-prop(|Type())> (c, <length> k*)
  
  type-of:
    NativeFunCall(srecv, name, _, _) -> ty
    where
      s-def := <lookup-def(|Types())> srecv;
      f-def := <lookup-native-fun-def(|name)> s-def;
      FunctionType(_, ty) := <lookup-prop(|Type())> f-def

rules /* desugar rule conclusion/premise source */

  desugar-semantic-components = topdown(repeat(desugar-rule-conclusion-source <+ desugar-relation-premise-source))

  desugar-rule-conclusion-source:
    Rule(p*, infer, Relation(Reads(ro*), Source(t, rw*), rel, tgt), kind, class) -> Rule(p*, infer, Relation(Source(t, [ro*, rw*]), rel, tgt), kind, class) 

  desugar-relation-premise-source:
    Formula(Relation(Reads(ro*), Source(t, rw*), rel, tgt)) -> Formula(Relation(Source(t, [ro*, rw*]), rel, tgt))

rules /* list reductions */

  desugar-list-reductions = alltd(desugar-list-reduction)
  
  desugar-list-reduction:
    Formula(Relation(Source(t, rws), rel, target)) -> Formula(Relation(Source(ListSource(t, ty), rws), rel, target))
    where
      <type-of> t => ty@ListType(_)

rules /* TCO */

//  desugar-rec-tco = alltd(try(desugar-rule-pushdown-target); desugar-rule-rec-tco)
//
//  desugar-rule-pushdown-target:
//    Rule(p*, infer, Relation(src, arrow, Target(tt, rws)), kind, class) ->
//      Rule([p*, Formula(Match(tt, Var(v)))], infer, Relation(src, arrow, Target(VarRef(v), rws)), kind, class)
//    where
//      <not(?VarRef(_))> tt;
//      v := <newname>
//
//  desugar-rule-rec-tco:
//    Rule(p*, infer, rel@Relation(Source(Con(c, k*), _), NamedDynamicEmitted(_, arrow-name, _), _), kind, class) -> Rule(p'*, infer, rel, kind, class)
//    where {| CurrentRelation:
//      rules(CurrentRelation: _ -> (c, <length> k*, arrow-name));
//      p'* := <desugar-prems-rec-tco(try(?succ))> p*;
//      !succ // ensure we have rewritten at least one call
//    |}
//  
//  desugar-rule-rec-tco:
//    Rule(p*, infer, rel@Relation(Source(Cast(_, ty@ListSort(_)), _), NamedDynamicEmitted(_, arrow-name, _), _), kind, class) -> Rule(p'*, infer, rel, kind, class)
//    where {| CurrentRelation:
//      rules(CurrentRelation: _ -> (<rw-type> ty, -1, arrow-name));
//      p'* := <desugar-prems-rec-tco(try(?succ))> p*;
//      !succ // ensure we have rewritten at least one call
//    |}
//  
//  desugar-prems-rec-tco(s) = is-list; try(at-last([desugar-prem-rec-tco(s)]))
//  
//  desugar-prem-rec-tco(s) =
//    CaseMatch(id, map(try(CaseOtherwise(desugar-prems-rec-tco(s)) + CasePattern(id, desugar-prems-rec-tco(s)))))
//  
//  desugar-prem-rec-tco(s):
//    Formula(Relation(src@Source(Con(c, k*), _), rel@NamedDynamicEmitted(_, arrow-name, _), tgt)) ->
//      Formula(RecRelation(src, rel, tgt))
//    where
//      (c, k-length, arrow-name) := <CurrentRelation>;
//      <eq> (k-length, <length> k*);
//      s
//
//  desugar-prem-rec-tco(s):
//    Formula(Relation(src@Source(ArgRead(0), _), rel@NamedDynamicEmitted(_, arrow-name, _), tgt)) ->
//      Formula(RecRelation(src, rel, tgt))
//    where
//      (_, _, arrow-name) := <CurrentRelation>;
//      s
//  
//  desugar-prem-rec-tco(s):
//    Formula(Relation(src@Source(ListSource(_, lty), _), rel@NamedDynamicEmitted(_, arrow-name, _), tgt)) ->
//      Formula(RecRelation(src, rel, tgt))
//    where
//      (lty, -1, arrow-name) := <CurrentRelation>; 
//      s

rules /* desugar not-match and not equal premises */

  desugar-nmatch-neq = alltd(desugar-premise-nmatch-neq)
  
  desugar-premise-nmatch-neq:
    Formula(NMatch(tb, pat)) -> Formula(Fails(Formula(Match(tb, pat))))
  
  desugar-premise-nmatch-neq:
    Formula(TermNeq(tb1, tb2)) -> Formula(Fails(Formula(TermEq(tb1, tb2))))

rules /* unquote string literals */

  desugar-unquote-strings = alltd(String(un-double-quote))
  
rules /* resugar list construction */

  jtype-lists = innermost(list-to-jtypedlist)
  
  list-to-jtypedlist:
    Cast(List_(elems), list-sort) -> TypedList(elems, list-class)
    where
       list-class := <jclass-term-qual> list-sort
  
  list-to-jtypedlist:
    Cast(ListTail(elems, tail), list-sort) -> TypedListTail(elems, tail, list-class)
    where
      list-class := <jclass-term-qual> list-sort
  
  list-to-jtypedlist:
    Cast(Tuple(elems), tuple-sort) -> TypedTuple(elems, tuple-class)
    where
       tuple-class := <jclass-term-qual> tuple-sort
  
  list-to-jtypedlist:
    Cast(MapKeys(t), ListSort(ety)) -> TypedMapKeys(t, key-class)
    where
      key-class := <jclass-term-qual> ety
  
  list-to-jtypedlist:
    Cast(MapValues(t), list-sort) -> TypedMapValues(t, vallist-class)
    where
      vallist-class := <jclass-term-qual> list-sort

//rules /* desugaring concat */
//
//  desugar-concat-all = alltd(desugar-concat)
//
//  desugar-concat:
//    Concat(t1, t2) -> StrConcat(<desugar-concat-all> t1, <desugar-concat-all> t2)
//    where
//      StringType() := <type-of> t1;
//      StringType() := <type-of> t2
//
//  desugar-concat:
//    Concat(t1, t2) -> ListConcat(<desugar-concat-all> t1, <desugar-concat-all> t2)
//    where
//      ListType(ty1) := <type-of> t1;
//      ListType(ty2) := <type-of> t2;
//      <eq> (ty1, ty2)

rules /* counted while loops */
  
  counted-while-loops =
    {| WhileCallIdx:
      rules(WhileCallIdx: _ -> 0);
      alltd(counted-while-loops-calls)
    |}
  
  counted-while-loops-calls:
    WhileNode(t1, t2, t3, ts1*, ts2*) -> CountedWhileNode(idx, t1, t2, t3, [ts1*, ts2*])
    where
      idx := <WhileCallIdx>;
      nidx := <inc> idx;
      rules(WhileCallIdx: _ -> nidx)
    