module backend/interpreter/maps/terms

imports
  signatures/-
  signatures/dynsem/-
  backend/common/-
  backend/interpreter/-
  backend/interpreter/terms/-
  
rules // creation from aterms

  ds-to-interp-sorts-to-create-arg:
    (e_term, ms@MapSort(skey, sval)) ->
      e |[
        new Object() {
          public com.github.krukow.clj_lang.PersistentHashMap apply() {
            throw new IllegalStateException("Maps of value terms cannot be created from Stratego terms");
          }
        }.apply()
      ]|
    where
      <is-value-sort> ms
      
  ds-to-interp-sorts-to-create-arg:
    (e_term, ms@MapSort(skey, sval)) ->
      e |[
        new Object() {
          public com.github.krukow.clj_lang.PersistentHashMap apply() {
            IStrategoTerm x_mapT = e_term;
            assert Tools.isTermList(x_mapT);
          
            IStrategoList x_bindsT = (IStrategoList)x_mapT;
          
            java.util.Map<x_keyclass, x_valclass> x_map = new java.util.HashMap<x_keyclass, x_valclass>(
                Math.round(x_bindsT.size() / 0.75f), 0.75f);
            for (IStrategoTerm x_bindT : x_bindsT) {
              assert Tools.isTermTuple(x_bindT) && x_bindT.getSubtermCount() == 2;
              x_map.put(e_keycreate, e_valcreate);
            }
            return com.github.krukow.clj_lang.PersistentHashMap.create(x_map);
          }
        }.apply()
      ]|
    where
      <not(is-value-sort)> ms;
      x_mapT := $[_[<newname>]];
      x_bindsT := $[_[<newname>]];
      x_map := $[_[<newname>]];
      x_bindT := $[_[<newname>]];
      x_keyclass := <jclass-term; jclass-box> skey;
      x_valclass := <jclass-term; jclass-box> sval;
      e_keycreate := <ds-to-interp-sorts-to-create-arg> (e |[ x_bindT.getSubterm(0) ]|, skey);
      e_valcreate := <ds-to-interp-sorts-to-create-arg> (e |[ x_bindT.getSubterm(1) ]|, sval)
