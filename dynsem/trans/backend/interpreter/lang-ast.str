module backend/interpreter/lang-ast

imports
  signatures/-
  analysis/-
  backend/interpreter/-
  backend/interpreter/terms/-
  backend/interpreter/sorts/-
  backend/interpreter/constructors/-
  backend/interpreter/lists/-
  backend/interpreter/tuples/-
  backend/interpreter/maps/-
  backend/interpreter/nativeops/-
  backend/interpreter/nativetypes/-
  backend/utils/-
  backend/common/-
  libjava-front

rules
  
  ds-to-interp-terms-module =
    m-in-analysis(
      ?mod@Module(_, <fetch-elem(?Signatures(sig*))>);
      where(ds-to-interp-clean-target; ds-to-interp-gen-project);
      <ds-to-interp-terms-signatures-top; ds-to-interp-write-classes(|<get-opt> TermPkg())> mod;
      <ds-to-interp-terms-types-signatures; MkSingleton; ds-to-interp-write-classes(|<get-opt> TopPkg())> mod;
      <ds-to-inter-terms-sortbuilding; ds-to-interp-write-classes(|<get-opt> BuildPkg())> sig*;
      <ds-to-interp-terms-sortmatching; ds-to-interp-write-classes(|<get-opt> ChecksPkg())> sig*;
      <ds-to-interp-terms-building; ds-to-interp-write-classes(|<get-opt> BuildPkg())> mod;
      <ds-to-interp-terms-matching; ds-to-interp-write-classes(|<get-opt> MatchPkg())> mod;
      <ds-to-interp-nattypes-adapters-top; ds-to-interp-write-classes(|<get-opt> BuildPkg())> sig*;
      <ds-to-interp-terms-registry-top; MkSingleton; ds-to-interp-write-classes(|<get-opt> TopPkg())> mod;
      ds-to-interp-language; MkSingleton; ds-to-interp-write-classes(|<get-opt> TopPkg());
      ds-to-interp-language-entrypoint; MkSingleton; ds-to-interp-write-classes(|<get-opt> TopPkg());
      ds-to-interp-language-coreentry; MkSingleton; ds-to-interp-write-classes(|<get-opt> TopPkg());
      ds-to-interp-language-daemonentry; MkSingleton; ds-to-interp-write-classes(|<get-opt> TopPkg());
      ds-to-interp-language-benchmarkentry; MkSingleton; ds-to-interp-write-classes(|<get-opt> TopPkg());
      ds-to-interp-gen-test-harness
    )

  ds-to-interp-clean-target =
    get-opt(|CleanProject()) <
      <concat-strings> [<get-opt> JavaGenDirAbs(), "/", <string-replace(|".", "/")> <get-opt> TopPkg()];
      try(rmdir)
    + id

rules /* Sort & Constructor classes */

  ds-to-interp-terms-signatures-top:
    mod@Module(_, section*) -> [sort-class*, cons-class*, tuple-class*, list-class*]
    where
      <fetch-elem(?Signatures(sig*))> section*
    where
      sort-dec* := <fetch-elem(?Sorts(<id>))> sig*;
      cons-dec* := <fetch-elem(?Constructors(<id>))> sig*;
      list-dec* := <get-languagelist-usage-in-signatures> sig*;
      tuple-dec* := <get-languagetuple-usage-in-module> mod;
      sort-class* := <ds-to-interp-terms-sortdecls(|cons-dec*)> sort-dec*;
      cons-class* := <ds-to-interp-terms-consdecls> cons-dec*;
      tuple-class* := <ds-to-interp-terms-tupledecls> tuple-dec*;
      list-class* := <ds-to-interp-terms-listdecls> list-dec*
  
  get-languagelist-usage-in-signatures:
    sig -> [explicit-list*, implicit-map-key*, implicit-map-val*]
    where
      explicit-list* := <collect-all(?ListSort(_)); nub> sig;
      implicit-map-key* := <collect-all(\ MapSort(k, _) -> ListSort(k) \); nub> sig;
      implicit-map-val* := <collect-all(\ MapSort(_, v) -> ListSort(v) \); nub> sig
  
  get-languagetuple-usage-in-module:
    m -> <nub> [tup-decl*, tup-used*]
    where
      tup-decl* := <collect-all(?TupleSort(_))> m;
      tup-used* := <collect-all(\ Tuple(t*) -> TupleSort(<map(type-of; derw-type)> t*) \)> m
  
  ds-to-interp-hashcode-append:
    (idx, e) -> e |[ e.append(~x:$[_[idx]]) ]|
  
  
  // generate equality check for a field that is of native type
  ds2java-field-eq-check:
    (idx, ty) -> 
      bstm* |[
        if (x_idx != other.x_idx) {
          return false;
        }
      ]|
    where
      <type-is-primitive> ty;
      x_idx := $[_[idx]]
  
  // generate equality check for a field that is of user type
  ds2java-field-eq-check:
      (idx, ty) -> 
      bstm* |[
        if (x_idx == null) {
          if (other.x_idx != null) {
            return false;
          }
        } else if (!x_idx.equals(other.x_idx)) {
          return false;
        }
      ]|
    where
      <not(type-is-primitive)> ty;
      x_idx := $[_[idx]]
  
  ds-to-interp-sorts-to-params = is-list; map-with-index(ds-to-interp-sort-to-param)
  
  ds-to-interp-sort-to-param:
    (i, s) -> param |[ x_sortclass x_name ]|
    where
      x_sortclass := <jclass-term> s;
      x_name := $[_[i]]
  
  ds-to-interp-sorts-to-finits = is-list; map-with-index(ds-to-interp-sort-to-finit)
  
  ds-to-interp-sort-to-finit:
    (i, _) -> bstm |[ this.x_name = x_name; ]|
    where
      x_name := $[_[i]]

  ds-to-interp-sorts-to-fdecs = is-list; map-with-index(ds-to-interp-sort-to-fdec)
  
  ds-to-interp-sort-to-fdec:
    (i, s) -> class-body-dec |[ private final x_sortclass x_name; ]|
    where
      x_sortclass := <jclass-term> s;
      x_name := $[_[i]]

  ds-to-interp-sorts-to-fgets = is-list; map-with-index(ds-to-interp-sort-to-fget)
  
  ds-to-interp-sort-to-fget:
    (i, s) ->
      class-body-dec |[
        public x_sortclass x_getname() {
          return x_name;
        }
      ]|
    where
      x_sortclass := <jclass-term> s;
      x_getname := $[get_[i]];
      x_name := $[_[i]]

rules /* type system class */

  ds-to-interp-terms-types-signatures:
    mod@Module(_, section*) ->
      compilation-unit |[
        package ~x:<get-opt> TopPkg();

        import com.oracle.truffle.api.dsl.TypeSystem;
        import ~x:<get-opt> TermPkg().*;
        import ~x:<get-opt> NativePkg().*;
        import org.metaborg.meta.lang.dynsem.interpreter.terms.*;
        import com.github.krukow.clj_ds.PersistentMap;
        
        @TypeSystem({ ~type*, IApplTerm.class, ITupleTerm.class, ITerm.class, PersistentMap.class, String.class, int.class, boolean.class, Object[].class })
        public class Types {
          
        }
      ]|
    where
      <fetch-elem(?Signatures(sig-sec*))> section*;
      decl* := <filter(?Sorts(<id>) + ?Constructors(<id>) + ?NativeDataTypes(<id>)); concat;
        qsort(?(ConsDecl(_, _, _, _), SortDecl(_, _)) + ?(SortDecl(_, _), NativeBaseTypeDecl(_, _, _, _)) + ?(ConsDecl(_, _, _, _), NativeBaseTypeDecl(_, _, _, _)))> sig-sec*;
      list* := <get-languagelist-usage-in-signatures> sig-sec*;
      tuple* := <get-languagetuple-usage-in-module> mod;
      ![decl*, tuple*, list*];
      map(jclass-term);
      map(!Lit(Class(ClassOrInterfaceType(TypeName(Id(<id>)), None())))); nub => type*

rules /* term building */

  ds-to-interp-terms-building:
    mod@Module(_, section*) -> [con-build*, list-build*, tuple-build*]
    where
      <fetch-elem(?Signatures(sig*))> section*;
      con-dec* := <fetch-elem(?Constructors(<id>))> sig*;
      list-dec* := <get-languagelist-usage-in-signatures> sig*;
      tuple-dec* := <get-languagetuple-usage-in-module> mod;
      con-build* := <ds-to-interp-terms-building-cons> con-dec*;
      list-build* := <ds-to-interp-terms-building-lists> list-dec*;
      tuple-build* := <map(ds-to-interp-terms-building-tuple)> tuple-dec*


      

rules /* term matching */

  ds-to-interp-terms-matching:
    mod@Module(_, section*) -> [con-match*, list-match*, tuple-match*]
    where
      <fetch-elem(?Signatures(sig*))> section*;
      con-dec* := <fetch-elem(?Constructors(<id>))> sig*;
      list-dec* := <get-languagelist-usage-in-signatures> sig*;
      tuple-dec* := <get-languagetuple-usage-in-module> mod;
      con-match* := <ds-to-interp-terms-matching-cons> con-dec*;
      list-match* := <ds-to-interp-terms-matching-lists> list-dec*;
      tuple-match* := <ds-to-interp-terms-matching-tuples> tuple-dec*


      




