module backend/interpreter/lang-ast

imports
  signatures/-
  analysis/-
  backend/interpreter/-
  backend/interpreter/terms/-
  backend/interpreter/sorts/-
  backend/interpreter/constructors/-
  backend/interpreter/lists/-
  backend/interpreter/tuples/-
  backend/interpreter/maps/-
  backend/utils/-
  backend/common/-
  libjava-front

rules
  
  ds-to-interp-terms-module =
    m-in-analysis(
      debug(!"gen1 ");
      ?mod@Module(_, <fetch-elem(?Signatures(sig*))>);
      debug(!"gen2 ");
      where(ds-to-interp-clean-target; ds-to-interp-gen-project);
      debug(!"gen3 ");
      <ds-to-interp-terms-signatures-top; ds-to-interp-write-classes(|<get-opt> TermPkg())> mod;
      debug(!"gen4 ");
      <ds-to-interp-terms-types-signatures; MkSingleton; ds-to-interp-write-classes(|<get-opt> TopPkg())> mod;
      debug(!"gen5 ");
      <ds-to-inter-terms-sortbuilding; ds-to-interp-write-classes(|<get-opt> BuildPkg())> sig*;
      debug(!"gen6 ");
      <ds-to-interp-terms-sortmatching; ds-to-interp-write-classes(|<get-opt> ChecksPkg())> sig*;
      debug(!"gen7 ");
      <ds-to-interp-terms-building; ds-to-interp-write-classes(|<get-opt> BuildPkg())> mod;
      debug(!"gen8 ");
      <ds-to-interp-terms-matching; ds-to-interp-write-classes(|<get-opt> MatchPkg())> mod;
      debug(!"gen9 ");
      <ds-to-interp-nattypes-adapters-top; ds-to-interp-write-classes(|<get-opt> BuildPkg())> sig*;
      debug(!"gen10 ");
      <ds-to-interp-terms-registry-top; MkSingleton; ds-to-interp-write-classes(|<get-opt> TopPkg())> mod;
      debug(!"gen11 ");
      ds-to-interp-language; MkSingleton; ds-to-interp-write-classes(|<get-opt> TopPkg());
      debug(!"gen12 ");
      ds-to-interp-language-entrypoint; MkSingleton; ds-to-interp-write-classes(|<get-opt> TopPkg());
      debug(!"gen13 ");
      ds-to-interp-language-coreentry; MkSingleton; ds-to-interp-write-classes(|<get-opt> TopPkg());
      debug(!"gen14 ");
      ds-to-interp-language-daemonentry; MkSingleton; ds-to-interp-write-classes(|<get-opt> TopPkg());
      debug(!"gen15 ");
      ds-to-interp-language-benchmarkentry; MkSingleton; ds-to-interp-write-classes(|<get-opt> TopPkg());
      debug(!"gen16 ");
      ds-to-interp-gen-test-harness
      ;debug(!"gen17 ")
    )

  ds-to-interp-clean-target =
    get-opt(|CleanProject()) <
      <concat-strings> [<get-opt> JavaGenDirAbs(), "/", <string-replace(|".", "/")> <get-opt> TopPkg()];
      try(rmdir)
    + id

rules /* Sort & Constructor classes */

  ds-to-interp-terms-signatures-top:
    mod@Module(_, section*) -> [sort-class*, cons-class*, tuple-class*, list-class*]
    where
      <fetch-elem(?Signatures(sig*))> section*
    where
      debug(!"sig1 ");
      sort-dec* := <fetch-elem(?Sorts(<id>))> sig*;
      debug(!"sig2 ");
      cons-dec* := <fetch-elem(?Constructors(<id>))> sig*;
      debug(!"sig3 ");
      list-dec* := <get-languagelist-usage-in-signatures> sig*;
      debug(!"sig4 ");
      tuple-dec* := <get-languagetuple-usage-in-module> mod;
      debug(!"sig5 ");
      sort-class* := <ds-to-interp-terms-sortdecls(|cons-dec*)> sort-dec*;
      debug(!"sig6 ");
      cons-class* := <ds-to-interp-terms-consdecls> cons-dec*;
      debug(!"sig7 ");
      tuple-class* := <map(ds-to-interp-terms-tupledecl)> tuple-dec*;
      debug(!"sig8 ");
      list-class* := <ds-to-interp-terms-listdecls> list-dec*
      ;debug(!"sig9 ")
  
  get-languagelist-usage-in-signatures:
    sig -> [explicit-list*, implicit-map-key*, implicit-map-val*]
    where
      explicit-list* := <collect-all(?ListSort(_)); nub> sig;
      implicit-map-key* := <collect-all(\ MapSort(k, _) -> ListSort(k) \); nub> sig;
      implicit-map-val* := <collect-all(\ MapSort(_, v) -> ListSort(v) \); nub> sig
  
  get-languagetuple-usage-in-module =
    ?Module(_, _);
    collect-all(?TupleSort(_));
    nub
  
  ds-to-interp-hashcode-append:
    (idx, e) -> e |[ e.append(~x:$[_[idx]]) ]|
  
  
  ds-to-interp-sorts-to-create-arg:
    (e_term, sref@SimpleSort(s)) ->
      e |[ x_ttype.create(e_term) ]|
    where
      <not(type-is-builtin)> s;
      x_ttype := <jclass-term> sref

  ds-to-interp-sorts-to-create-arg:
    (e_term, ls@ListSort(_)) -> e |[ x_listclass.create(e_term) ]|
    where
      x_listclass := <jclass-term> ls
  
  ds-to-interp-sorts-to-create-arg:
    (e_term, ts@TupleSort(_)) -> e |[ x_tupleclass.create(e_term) ]|
    where
      x_tupleclass := <jclass-term> ts

  ds-to-interp-sortelem-to-create-arg(|e_tmpelem):
    s@SimpleSort(_) -> e |[ x_elemclass.create(e_tmpelem) ]|
    where
      <not(type-is-builtin)> s;
      x_elemclass := <jclass-term> s

  ds-to-interp-sortelem-to-create-arg(|e_tmpelem):
    l@ListSort(_) -> <ds-to-interp-sorts-to-create-arg> (e_tmpelem, l)
  
  ds-to-interp-sortelem-to-create-arg(|e_tmpelem):
    t@TupleSort(_) -> <ds-to-interp-sorts-to-create-arg> (e_tmpelem, t)

  ds-to-interp-sortelem-to-create-arg(|e_tmpelem):
    m@MapSort(_, _) -> <ds-to-interp-sorts-to-create-arg> (e_tmpelem, m)
      
  ds-to-interp-sortelem-to-create-arg(|e_tmpelem):
    SimpleSort("String") -> e |[ Tools.asJavaString(e_tmpelem) ]|

  ds-to-interp-sortelem-to-create-arg(|e_tmpelem):
    SimpleSort("Int") -> e |[ Tools.asJavaInt(e_tmpelem) ]|

  ds-to-interp-sorts-to-create-arg:
    (e_term, MapSort(skey, sval)) ->
      e |[
        new Object() {
          public com.github.krukow.clj_lang.PersistentHashMap apply() {
            IStrategoTerm x_mapT = e_term;
            assert Tools.isTermList(x_mapT);
          
            IStrategoList x_bindsT = (IStrategoList)x_mapT;
          
            java.util.Map<x_keyclass, x_valclass> x_map = new java.util.HashMap<x_keyclass, x_valclass>(
                Math.round(x_bindsT.size() / 0.75f), 0.75f);
            for (IStrategoTerm x_bindT : x_bindsT) {
              assert Tools.isTermTuple(x_bindT) && x_bindT.getSubtermCount() == 2;
              x_map.put(e_keycreate, e_valcreate);
            }
            return com.github.krukow.clj_lang.PersistentHashMap.create(x_map);
          }
        }.apply()
      ]|
    where
      x_mapT := $[_[<newname>]];
      x_bindsT := $[_[<newname>]];
      x_map := $[_[<newname>]];
      x_bindT := $[_[<newname>]];
      x_keyclass := <jclass-term; jclass-box> skey;
      x_valclass := <jclass-term; jclass-box> sval;
      e_keycreate := <ds-to-interp-sorts-to-create-arg> (e |[ x_bindT.getSubterm(0) ]|, skey);
      e_valcreate := <ds-to-interp-sorts-to-create-arg> (e |[ x_bindT.getSubterm(1) ]|, sval)

  ds-to-interp-sorts-to-create-arg:
    (e_term, sref@NativeType(_, "org.spoofax.interpreter.terms.IStrategoTerm")) -> e |[ e_term ]|

  ds-to-interp-sorts-to-create-arg:
    (e_term, sref@NativeType(_, qpath)) -> e |[ null ]|
    where
      <not(eq)> (qpath, "org.spoofax.interpreter.terms.IStrategoTerm") 

  ds-to-interp-sorts-to-create-arg:
    (e_term, sref@SimpleSort("String")) -> e |[ ((IStrategoString) e_term).stringValue() ]|

  ds-to-interp-sorts-to-create-arg:
    (e_term, sref@SimpleSort("Int")) -> e |[ ((IStrategoInt) e_term).intValue() ]|

  ds-to-interp-sorts-to-create-arg:
    (e_term, sref@SimpleSort("Bool")) ->
      e |[
        new Object() {
          public boolean apply() {
            IStrategoAppl x_tmp1 = (IStrategoAppl) e_term;
            assert Tools.hasConstructor(x_tmp1, "True", 0) || Tools.hasConstructor(x_tmp1, "False", 0);
            return Tools.hasConstructor(x_tmp1, "True", 0) ? true : false;
          }
        }.apply()
      ]|
    where
      x_tmp1 := $[_[<newname>]]
  
  ds-to-interp-sorts-to-create-arg:
    (e_term, SimpleSort("AST")) -> e |[ null ]|
  
  // generate equality check for a field that is of native type
  ds2java-field-eq-check:
    (idx, ty) -> 
      bstm* |[
        if (x_idx != other.x_idx) {
          return false;
        }
      ]|
    where
      <type-is-primitive> ty;
      x_idx := $[_[idx]]
  
  // generate equality check for a field that is of user type
  ds2java-field-eq-check:
      (idx, ty) -> 
      bstm* |[
        if (x_idx == null) {
          if (other.x_idx != null) {
            return false;
          }
        } else if (!x_idx.equals(other.x_idx)) {
          return false;
        }
      ]|
    where
      <not(type-is-primitive)> ty;
      x_idx := $[_[idx]]
  
  ds-to-interp-sorts-to-params = is-list; map-with-index(ds-to-interp-sort-to-param)
  
  ds-to-interp-sort-to-param:
    (i, s) -> param |[ x_sortclass x_name ]|
    where
      x_sortclass := <jclass-term> s;
      x_name := $[_[i]]
  
  ds-to-interp-sorts-to-finits = is-list; map-with-index(ds-to-interp-sort-to-finit)
  
  ds-to-interp-sort-to-finit:
    (i, _) -> bstm |[ this.x_name = x_name; ]|
    where
      x_name := $[_[i]]

  ds-to-interp-sorts-to-fdecs = is-list; map-with-index(ds-to-interp-sort-to-fdec)
  
  ds-to-interp-sort-to-fdec:
    (i, s) -> class-body-dec |[ private final x_sortclass x_name; ]|
    where
      x_sortclass := <jclass-term> s;
      x_name := $[_[i]]

  ds-to-interp-sorts-to-fgets = is-list; map-with-index(ds-to-interp-sort-to-fget)
  
  ds-to-interp-sort-to-fget:
    (i, s) ->
      class-body-dec |[
        public x_sortclass x_getname() {
          return x_name;
        }
      ]|
    where
      x_sortclass := <jclass-term> s;
      x_getname := $[get_[i]];
      x_name := $[_[i]]

rules /* type system class */

  ds-to-interp-terms-types-signatures:
    mod@Module(_, section*) ->
      compilation-unit |[
        package ~x:<get-opt> TopPkg();

        import com.oracle.truffle.api.dsl.TypeSystem;
        import ~x:<get-opt> TermPkg().*;
        import ~x:<get-opt> NativePkg().*;
        import org.metaborg.meta.lang.dynsem.interpreter.terms.*;
        import com.github.krukow.clj_ds.PersistentMap;
        
        @TypeSystem({ ~type*, IApplTerm.class, ITupleTerm.class, ITerm.class, PersistentMap.class, String.class, int.class, boolean.class, Object[].class })
        public class Types {
          
        }
      ]|
    where
      debug(!"types1 ");
      <fetch-elem(?Signatures(sig-sec*))> section*;
      debug(!"types2 ");
      decl* := <filter(?Sorts(<id>) + ?Constructors(<id>) + ?NativeDataTypes(<id>)); concat;
        qsort(?(ConsDecl(_, _, _, _), SortDecl(_, _)) + ?(SortDecl(_, _), NativeBaseTypeDecl(_, _, _)) + ?(ConsDecl(_, _, _, _), NativeBaseTypeDecl(_, _, _)))> sig-sec*;
      debug(!"types3 ");
      list* := <get-languagelist-usage-in-signatures> sig-sec*;
      debug(!"types4 ");
      tuple* := <get-languagetuple-usage-in-module> mod;
      debug(!"types5 ");
      ![decl*, tuple*, list*];
      debug(!"types6 ");
      map(jclass-term);
      debug(!"types7 ");
      map(!Lit(Class(ClassOrInterfaceType(TypeName(Id(<id>)), None())))); nub => type*
      ;debug(!"types8 ")

rules /* term building */

  ds-to-interp-terms-building:
    mod@Module(_, section*) -> [con-build*, list-build*, tuple-build*]
    where
      <fetch-elem(?Signatures(sig*))> section*;
      con-dec* := <fetch-elem(?Constructors(<id>))> sig*;
      list-dec* := <get-languagelist-usage-in-signatures> sig*;
      tuple-dec* := <get-languagetuple-usage-in-module> mod;
      con-build* := <ds-to-interp-terms-building-cons> con-dec*;
      list-build* := <ds-to-interp-terms-building-lists> list-dec*;
      tuple-build* := <map(ds-to-interp-terms-building-tuple)> tuple-dec*


      

rules /* term matching */

  ds-to-interp-terms-matching:
    mod@Module(_, section*) -> [con-match*, list-match*, tuple-match*]
    where
      <fetch-elem(?Signatures(sig*))> section*;
      con-dec* := <fetch-elem(?Constructors(<id>))> sig*;
      list-dec* := <get-languagelist-usage-in-signatures> sig*;
      tuple-dec* := <get-languagetuple-usage-in-module> mod;
      con-match* := <ds-to-interp-terms-matching-cons> con-dec*;
      list-match* := <ds-to-interp-terms-matching-lists> list-dec*;
      tuple-match* := <map(ds-to-interp-terms-matching-tuple)> tuple-dec*


      




