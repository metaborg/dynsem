module backend/interpreter/constructors/registering

imports
  analysis/-
  signatures/-
  signatures/dynsem/-
  backend/interpreter/names
  backend/interpreter/terms/registering
  backend/utils/utils
  backend/common/-
  libjava-front
  lib-ds
  
rules

  ds-to-interp-terms-registry-inits =
    mapconcat(require(ds-to-interp-terms-registry-init, debug-decl-name|"Registry init failed for constructor"))
  
  ds-to-interp-terms-registry-init:
    dec@ConsDecl(name, kid*, _, _) ->
      bstm* |[
        constructorClasses.put(~e:Lit(String([Chars(con-name)])), x_conclass.class);
        initWrappers.put(x_conclass.class, new ITermInit() {
          @Override
          public x_conclass apply(Object... children) {
            return e_init;
          }
        });

        builderFactories.put(x_conclass.class, new ITermBuildFactory() {
          @Override
          public x_termbuildclass apply(SourceSection source, TermBuild... children) {
            return x_termbuildNG.create(source, e1*);
          }
        });

        matcherFactories.put(x_conclass.class, new ITermMatchPatternFactory() {
          @Override
          public MatchPattern apply(SourceSection source, MatchPattern... children) {
            return x_matchNG.create(source, e2*);
          }
        });
      ]|
    with
      con-name := <concat-strings> [name, "/", <length; int-to-string> kid*];
      x_conclass := <jclass-term> dec;
      x_termbuildclass := <jclass-termbuilder> dec;
      x_termbuildNG := <jclass-termbuilder-ng> dec;
      x_matchNG := <jclass-matcher-ng> dec;
      e1* := <map-with-index((dec; int-to-string, id); ds-to-interp-termbuild-access(|"children"))> kid*;
      e2* := <map-with-index(\ (i, _) -> e |[ children[~i:<dec; int-to-string> i] ]| \)> kid*;
      if [] := kid* then
        e_init := e |[ x_conclass.SINGLETON ]|
      else
        e_children* := <map-with-index((dec; int-to-string, jclass-term); \ (idx, x_ty) -> e |[ (x_ty) children[~i:idx] ]| \)> kid*;
        e_init := e |[ new x_conclass(e_children*) ]|
      end
  
