module backend/interpreter/contructors/building

imports
  signatures/-
  signatures/dynsem/-
  backend/interpreter/terms/-
  backend/interpreter/-
  backend/utils/-
  backend/common/-
  libjava-front

strategies

  ds-to-interp-terms-building-con:
    dec@ConsDecl(_, kid*@[_|_], s, _) ->
      compilation-unit |[
        package ~x:<get-opt> BuildPkg();
      
        import ~x:$[[<get-opt> TermPkg()].*];
        import ~x:<get-opt> NativePkg().*;
        import org.metaborg.meta.lang.dynsem.interpreter.nodes.building.*;
        import com.oracle.truffle.api.dsl.Cached;
        import com.oracle.truffle.api.dsl.NodeChild;
        import com.oracle.truffle.api.dsl.NodeChildren;
        import com.oracle.truffle.api.dsl.Specialization;
        import com.oracle.truffle.api.source.SourceSection;

        @NodeChildren({ ~child* })
        public abstract class x_class extends ~x:$[A[<ds-to-interp-terms-types-name> s]Build] {

          public x_class(SourceSection source) {
            super(source);
          }
          
          @Specialization(limit = "1", guards = e_cacheguard)
          public x_termclass doCached(
              param0*,
              param1*,
              @Cached(~e:Lit(String([Chars(str_cachegen)]))) x_termclass cachedTerm) {
            return cachedTerm;
          }
          
          @Specialization(replaces = "doCached")
          public x_termclass doTyped(param0*) {
            return buildTerm(e0*);
          }
          
          protected final x_termclass buildTerm(param0*) {
            return e_term;
          }
          
        }
      ]|
    where
      x_class := $[[<ds-to-interp-terms-types-name> dec]Build];
      child* := <ds-to-interp-terms-building-childannos> kid*;
      x_termclass := <ds-to-interp-terms-types-name> dec;
      param0* := <ds-to-interp-terms-building-params> kid*;
      param1* := <ds-to-interp-terms-building-cachedparams> kid*;
      e_cacheguard := <ds-to-interp-terms-cachedparam-cacheguards> kid*;
      e0* := <ds-to-interp-terms-building-exprs> kid*;
      str_cachegen := <ds-utils-debugged-java-pp> e |[ doTyped(e0*) ]|
    where
      if [] := kid*
      then
        e_term := e |[ x_termclass.SINGLETON ]|
      else
        e_term := e |[ new x_termclass(e0*) ]|
      end
  
  ds-to-interp-terms-building-con:
    dec@ConsDecl(_, [], s, _) ->
      compilation-unit |[
        package ~x:<get-opt> BuildPkg();
      
        import ~x:$[[<get-opt> TermPkg()].*];
        import ~x:<get-opt> NativePkg().*;
        import org.metaborg.meta.lang.dynsem.interpreter.nodes.building.*;
        import com.oracle.truffle.api.dsl.Cached;
        import com.oracle.truffle.api.dsl.NodeChild;
        import com.oracle.truffle.api.dsl.NodeChildren;
        import com.oracle.truffle.api.dsl.Specialization;
        import com.oracle.truffle.api.source.SourceSection;

        @NodeChildren({ })
        public abstract class x_class extends ~x:$[A[<ds-to-interp-terms-types-name> s]Build] {

          public x_class(SourceSection source) {
            super(source);
          }
          
          @Specialization(limit = "1")
          public x_termclass doCached(
              @Cached("buildTerm()") x_termclass cachedTerm) {
            return cachedTerm;
          }
          
          protected final x_termclass buildTerm() {
            return x_termclass.SINGLETON;
          }
          
        }
      ]|
    where
      x_class := $[[<ds-to-interp-terms-types-name> dec]Build];
      x_termclass := <ds-to-interp-terms-types-name> dec


