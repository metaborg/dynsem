module backend/interpreter/lists/terms

imports
  signatures/-
  signatures/dynsem/-
  backend/common/-
  backend/interpreter/-
  backend/interpreter/lists/util
  backend/interpreter/terms/-

strategies

  ds-to-interp-terms-listdecls = 
    map(require(ds-to-interp-terms-listdecl, debug-decl-name|"List term generation failed for"))
  
rules

  ds-to-interp-terms-listdecl:
    s@ListSort(es) ->
      compilation-unit |[
        package ~x:<get-opt> TermPkg();

        import com.oracle.truffle.api.CompilerDirectives.TruffleBoundary;
        import com.oracle.truffle.api.CompilerAsserts;
        import org.metaborg.meta.lang.dynsem.interpreter.terms.concrete.ConsNilList;
        import org.spoofax.interpreter.core.Tools;
        import org.spoofax.interpreter.terms.*;
        import ~x:<get-opt> NativePkg().*;
        
        public final class x_listclass{

          ~mcreate0*
          
        }
      ]|
    where
      x_listclass := <jclass-term> s;
      x_elemclass := <jclass-term; jclass-box> es;
      if <is-value-sort> es
      then
        mcreate0* := class-body-dec* |[
            @TruffleBoundary
            public static ConsNilList create(IStrategoTerm term) {
              throw new IllegalStateException("Lists of value terms cannot be created from Stratego terms");
            }
        ]|
      else
        e_elemcreate := <ds-to-interp-sorts-to-create-arg> (e |[ l.getSubterm(final_idx) ]|, es);
        sort-string := <string-type> s;
        mcreate0* := class-body-dec* |[
            @TruffleBoundary
            public static ConsNilList create(IStrategoTerm term) {
              CompilerAsserts.neverPartOfCompilation();
              assert term != null;
              assert Tools.isTermList(term);
              
              IStrategoList l = (IStrategoList) term;
              Object[] elems = new Object[l.size()];
              for(int idx = 0; idx < elems.length; idx++){
                final int final_idx = idx; // this is needed because e_elemcreate might be an anonymous object reading the idx
                elems[idx] = e_elemcreate;
              }
              return ConsNilList.fromArray(~e:Lit(String([Chars(sort-string)])).intern(), elems, term);
            }
        ]|
      end

rules // creation from aterms

  ds-to-interp-sorts-to-create-arg:
    (e_term, ls@ListSort(_)) -> e |[ ~x:<jclass-term> ls.create(e_term) ]|

