module backend/interpreter/nativeops/names

imports
  analysis/-
  signatures/-
  signatures/dynsem/-
  backend/interpreter/names
  backend/common/-
  
strategies // classes for sorts
  
  jclass-term = fail

strategies // builder for sorts

  jclass-termbuilder:
    NativeOpDecl(name, kid*, _, _) -> classname
    where
      if jclass := <lookup-def(|Constructors()); lookup-prop(|JClass()); unquote(?'"')> (name, <length> kid*)
      then
        classname := jclass
      else
        classname := <concat-strings> [<ds-utils-java-escape-id> name, "_", <length; int-to-string> kid*]
      end

//  jclass-termbuilder-qual:
//    d@NativeOpDecl(name, kid*, _, _) -> qclassname
//    where
//      classname := <jclass-termbuilder> d;
//      if <lookup-def(|Constructors()); has-prop(|JClass())> (name, <length> kid*)
//      then
//        qclassname := classname
//      else
//        qclassname := $[[<get-opt> NativePkg()].[classname]]
//      end
      
  jclass-termbuilder-ng = fail
  
strategies // checked builders
  
  jclass-checkedbuilder = fail

strategies // matcher for sorts
  
  jclass-matcher = fail
  
