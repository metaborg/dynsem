module ds

imports
	signatures/ds-sig
	signatures/Common-sig
	analysis/constructors

imports
	pp
	outline
	ds2ds/refocus
	ds2ds/strict
	ds2ds/sugar
	analysis/lib-analysis
	import-utils

imports
  lib-ds
	analysis/main
	ds2ds/core
	backend/interpreter/main

signature
  constructors
    Var : LID -> Term
    Var : ID -> Term

rules // Analysis
	
  editor-analyze:
    (ast, path, project-path) -> (analyzed-ast, error*, warning*, note*)
		with {| MyCurrentFile:
		  f-path := $[[project-path]/[path]];
		  rules(MyCurrentFile: _ -> f-path);
		  editor-init;
		  f := <origin-file> ast;
			<in-project-path(m-in-analysis(
				where(
		  		get-msgs(msg-isin-file(|f); msg-mk-editor-msg| Error()) => error*;
		  		get-msgs(msg-isin-file(|f); msg-mk-editor-msg| Warning()) => warning*;
		  		get-msgs(msg-isin-file(|f); msg-mk-editor-msg| Note()) => note*
		  	)
			)|project-path)> ast => analyzed-ast
		|}
	
	editor-show-analyzed:
		(selected, position, ast, path, project-path) -> (filename, analyzed-ast)
		with
			filename := <guarantee-extension(|"analyzed.aterm")> path;
			(analyzed-ast, _, _, _) := <editor-analyze> (ast, path, project-path)
			
rules
  
  // When given a tuple (path, string) this writes string into path.
  write-string-to-file =
    ?(filename, string);
    if <dirname; readdir> filename then
      with(
        handle := <fopen> (filename, "w");
        <fputs> (string, handle);
        <fclose> handle;
        <refresh-workspace-file> filename
      )
    end
    
rules // Editor services
	editor-resolve:
	  (node, position, ast, path, project-path) -> <fail>
  
  editor-hover:
    (target, position, ast, path, project-path) -> <fail>


	// Resolves a reference when the user control-clicks or presses F3 in the editor.
	// editor-resolve:
	// 	(node, position, ast, path, project-path) -> definition
	// 	where
	// 		definition := <analysis-resolve(|<language>, project-path)> node

	 // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  // editor-hover:
  //   (target, position, ast, path, project-path) ->
  //     <get-editor-properties(pp-ds-string |<language>, project-path);properties-to-html> target

  // Gathers the properties for the properties view.
  // editor-properties:
  //   (target, position, ast, path, project-path) ->
  //     <get-all-editor-properties(pp-ds-string |<language>, project-path)>target

	// Completes an identifier when the user presses control-space
	// (the completion identifier in the AST provides additional context information)
	// editor-complete:
	// 	(node, position, ast, path, project-path) -> proposals
	// 	where
	// 		proposals := <analysis-propose-completions(|<language>, project-path)> ast

rules // Debugging
	
	// Prints the abstract syntax ATerm of a selection.
	debug-show-aterm:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"aterm")> path;
			result	 := selected
			
  debug-show-desugared:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"desugared.aterm")> path;
      result   := <desugar-top> ast
			
rules // Builders
      
  // format rules
  format-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"pp.ds")> path;
      result   := <sugar-all; pp-debug> ast

