module lib-ds

imports
  signatures/-
  signatures/dynsem/-
  
// utilities for DynSem analysis

signature
  constructors
    Var : LID -> Term
    Var : ID -> Term


rules // utils for deterministic variable name generation
  
  next-variable(|prefix) = <newname> prefix
 
  next-variable = next-variable(|"_lifted_")

rules // projections for sorts
  
  get-sort-name =
    ?SortDecl(<id>, _)
    + ?SimpleSort(<id>)
    + ?ListSort(s); !$[L_[<get-sort-name> s]]
    + ?MapSort(k-s, v-s); !$[M_[<get-sort-name> k-s]_[<get-sort-name> v-s]]
    + ?TupleSort(s*); !$[T_[<map(get-sort-name); separate-by(|"_"); concat-strings> s*]]
  
rules
    
  get-module-arrow-declarations = collect-all(?ArrowDecl(_, _, _, _, _, _))

rules

  get-rule-relation:
    Rule(_, _, rel) -> rel

  get-relation-source:
    Relation(_, Source(src, _), _, _) -> src
  
  get-relation-target:
    Relation(_, _, _, Target(tgt, _)) -> tgt
  
  get-relation-arrow-name:
    Relation(_, _, arrow, _) -> <get-arrow-name> arrow
  
  get-arrow-name:
    ArrowDecl(_, _, _, name, _, _) -> name
  
  get-arrow-name:
    NamedDynamicEmitted(_, name) -> name
  
  get-arrow-name:
    NamedDynamic(name) -> name

rules // utils
	
	log-timed(s|msg) =
      where(times => starttime)
    ; s
    ; where(
        <diff-times>(<times>,starttime)
      ; <concat-strings>[ <align-left>(' ', msg, 27)
                        , " : [user/system] = ["
                        , <self-children-user-time; ticks-to-seconds ; real-to-string(|2)>
                        , "s/"
                        , <self-children-sys-time; ticks-to-seconds ; real-to-string(|2)>
                        , "s]"
                        ]
      ; log(|Info(),<id>)
      )
  
  log-timed-cummulate-scope(s) =
    {| CummulatedTimes:
      s
     |}
  
  log-timed-cummulate-show =
    where( 
      all-keys-CummulatedTimes;
      map(\ k -> $[[k] => [<CummulatedTimes> k]] \);
      separate-by(|"\n");
      concat-strings;
      debug(!"Measured times: \n")
    )
  
  log-timed-cummulate(s|cat) =
    where(times => starttime)
    ; s
    ; where(
        time-taken := <diff-times; self-children-user-time; ticks-to-seconds> (<times>, starttime);
        if prev-time := <CummulatedTimes> cat
        then
          sum-time := <add> (prev-time, time-taken);
          rules(CummulatedTimes: cat -> sum-time)
        else
          sum-time := time-taken;
          rules(CummulatedTimes: cat -> sum-time)    
        end
    )
  
  opt-with(s) = with(s)
