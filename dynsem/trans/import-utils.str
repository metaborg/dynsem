module import-utils

// The strategies in this file are all copy-pasted from stratego/metaborg.str
//
// We rely on these instead of stratego/metaborg.str in order to make projects more compositional.

signature constructors

  COMPLETION : String -> Term
  
rules /* helpers for import handling */

	language-source-locations = prim("SSL_EXT_language_source_locations", <id>)
  language-include-locations = prim("SSL_EXT_language_include_locations", <id>)
  language-source-and-include-locations = Dupl; (language-source-locations, language-include-locations); conc

  origin-file      = prim("SSL_EXT_origin_file", <id>)
  origin-track-forced(s) =
    ![<id>]; all(s); ?[<id>]
  
  refresh-workspace-file:
    path -> <prim("SSL_EXT_refreshresource", path)>
    
	/**
   * Processes an import during semantic analysis.
   * Ensures proper caching of files and prevents
   * processing duplicate imports more than once.
   *
   * @param resolve-path  Resolves the filesystem path of this import
   * @param parse-file    Parses a file (optionally removing definition bodies
   *                      so only signatures are stored in the cache)
   * @param record-declarations
   *                      Performs semantic analysis on a tree
   */
  open-import(resolve-path, parse-file, record-declarations):
    import -> import
    where
      if not(!import => COMPLETION(_)) then
        path       := <resolve-path> import;
        cache-path := <import-cache-path> path;
        if not(<IsImported> path) then
          rules(
            IsImported: path
          );
          ( <is-newer> (cache-path, path);
            file := <ReadFromFile> cache-path
          <+
            file := <parse-file> path;
            if <file-exists> path then
              // Only cache if on filesystem (e.g., ignore libstratego-lib)
              <try(WriteToBinaryFile)> (cache-path, file)
            end        
          );
          {| CurrentFile:
            rules(CurrentFile := path);
            <record-declarations> file
          |}
        end
      end

  editor-init =
    // Ensure all dynamic rules are properly scoped
    try(dr-scope-all-end);
    dr-scope-all-start

  import-cache-path:
    full-path -> cache-path
    with
      project-path := <project-path>;
      cache-dir    := <file-exists <+ mkdir> $[[project-path]/target/import-cache];
      full-path'   := <prim("digest")> full-path;
      cache-path   := $[[cache-dir]/[full-path'].sig]

  project-path = prim("SSL_EXT_projectpath")
  
  is-newer:
    (file1, file2) -> <id>
    where
      <gt> (<file-exists; modification-time> file1, <file-exists; modification-time> file2) 
  
  parse-ds:
    file -> str
    where
      str := <prim("STRSGLR_parse_string", id|file, (), (), file)>
