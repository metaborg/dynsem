module semantics/rules/matching

imports
  ds-signatures/ds-sig
  semantics/unit
  semantics/terms
  semantics/rules/evaluation
  
signature
  components
    T : T
  
  arrows
    Term -match-> U
    match-all(List(T), List(Term)) --> U
    eq-name-arity((String * String), (Int * Int)) --> Bool
    
rules
  
  // the OK() flag check should not be necessary, but there is bug in the propagation transformation
  T |- __Var2Term__(VarRef(x)) :: ST OK(), E -match-> U() :: ST OK(), E {x |--> T, E}
  where
    log("Assign " ++ x ++ " = " ++ str(T)) --> _
  
  T ApplT(x1, kids) |- Con(x2, kid-pats) -match-> U()
  where
      int2string(|kids|) => l-arity;
      int2string(|kid-pats|) => r-arity; 
      log("Matching appl " ++ x1 ++ " " ++ x2 ++ " kids " ++ l-arity ++ " " ++ r-arity) --> _;
    eq-name-arity((x1, x2), (|kids|, |kid-pats|)) --> true;
      log("Go ahead, superficial match") --> _;
    match-all(kids, kid-pats) --> _

  T |- pat : Term :: ST OK() -match-> ??? :: ST F()
  where
    log("Match failure: " ++ str(T) ++ " =!=> " ++ str(pat)) --> _

rules // helpers

  match-all([], []) --> U()
  
  match-all([T | Ts], [pat | pats]) --> match-all(Ts, pats)
  where
    T |- pat -match-> _

  eq-name-arity((x1, x2), (i1, i2)) --> true
  where
    x1 == x2;
    i1 == i2
  
  eq-name-arity((x1, x2), _) --> false
  where
    x1 != x2
  
  eq-name-arity(_, (i1, i2)) --> false
  where
    i1 != i2
