module semantics/signatures/loading

imports
  semantics/signatures/representation
  semantics/unit
  
signature
  arrows
    ModuleSection -load-> U
    SignatureSection -load-> U
    List(SortDecl) -load-> U
    SortDecl -load-> U
    List(ConsDecl) -load-> U
    ConsDecl -load-> U
    List(ArrowDecl) -load-> U
    ArrowDecl -load-> U
    List(NativeOpDecl) -load-> U
    NativeOpDecl -load-> U

rules

  Signatures([srts, conss, natconss, natops, arrs, nattypes, comps, schemes]) -load-> U()
  where
    srts -load-> _;
    conss -load-> _;
    arrs -load-> _;
    natops -load-> _

rules // sorts

  Sorts(sortdecls) -load-> U()
  where
    sortdecls -load-> _

  [] : List(SortDecl) -load-> U()
  
  [srt|srts] : List(SortDecl) -load-> U()
  where
    srt -load-> _;
    srts -load-> _
  
  SortDecl(x) :: S -load-> U() :: S {SimpleSort(x) |--> SimpleSort(x), S}
  
rules // constructors
  
  Constructors(consdecls) -load-> U()
  where
    consdecls -load-> _
  
  [] : List(ConsDecl) -load-> U()
  
  [cons|conss] : List(ConsDecl) -load-> U()
  where
    cons -load-> _;
    conss -load-> _
  
  ConsDecl(x, kids, ty, _) :: C -load-> U() :: C {(x, |kids|) |--> ty, C}

rules // arrows

  Arrows(arrowz) -load-> U()
  where
    arrowz -load-> _
  
  [] : List(ArrowDecl) -load-> U()
  
  [arr|arrs] : List(ArrowDecl) -load-> U()
  where
    arr -load-> _;
    arrs -load-> _

  ArrowDecl(ros, in-ty, rw-ins, x, out-ty, rw-outs) :: A -load-> U() :: A { (x, in-ty) |--> out-ty, A} 

rules // native operators
  
  NativeOperators(natops) -load-> U()
  where
    natops -load-> _
  
  [] : List(NativeOpDecl) -load-> U()
  
  [natop|natops] : List(NativeOpDecl) -load-> U()
  where
    natop -load-> _;
    natops -load-> _
  
  NativeOpDecl(x, kid-tys, ty) :: NatC -load-> U() :: NatC { (x, |kid-tys|) |--> ty, NatC}
