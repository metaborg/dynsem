module ds2ds/refocus

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  signatures/ds-sig
  signatures/Module-sig
  ds2ds/sugar
  pp
  ds
  
strategies

  refocus-editor:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"refocused.ds")> path;
      result   := <refocus-module; pp-debug> selected

  refocus-module : 
    Module(name, section*) -> Module(name, section'*)
    where 
      section'* := <map(try(refocus-rules))> section*
  
  refocus-rules = 
    desugar-top; alltd(refocus); sugar-all
  
rules
  
	/* Refocussing:
	
	x --> y , Exec(y) --> z
	-----------------------
	       x --> z
	
	Specialise first premise with respect to each rule.
	*/
  
  refocus :
    Rule(prem*, infer, 
          Relation(reads, Source(lhs,sc*), DynamicEmitted(em1*), Target(rhs,tc*))) -> 
    
    Rule(<conc>(prem*,[prem]), infer, 
          Relation(reads, Source(lhs,sc*), DynamicEmitted(em3*), Target(Var(x),[])))
    
    where x := <new>;
          em2* := <map(\LabelComp(name, t) -> LabelComp(name, Var(<new>))\)>em1*; // fresh variable
          em3* := <zip(\(LabelComp(name, t1), LabelComp(name, t2)) -> LabelComp(name, Con("Conc", [t1, t2]))\)> (em1*, em2*); 
          prem := 
            Formula(Relation(NoReads(), 
                      Source(Con("Exec", [rhs]), tc*), DynamicEmitted(em2*), Target(Var(x))))
                      
   // todo: don't lift target if it is a value 

    
    
    
