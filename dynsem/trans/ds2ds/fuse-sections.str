module ds2ds/fuse-sections

imports
  signatures/-
  signatures/dynsem/-

rules
  
  fuse-sections:
    Module(mod, body*) -> Module(mod, [import, Signatures(signatures), Rules(rule-decl*)]) 
    with
      import        := <collect-all(?Imports(<id>)); concat; !Imports(<id>)> body*;
      sort-decl     := <collect-all(?Sorts(<id>)); concat; !Sorts(<id>)> body*;
      natty-decl    := <collect-all(?NativeDataTypes(<id>)); concat; !NativeDataTypes(<id>)> body*;
      cons-decl     := <collect-all(?Constructors(<id>)); concat; !Constructors(<id>)> body*;
      natcons-decl  := <collect-all(?NativeConstructors(<id>)); concat; !NativeConstructors(<id>)> body*;
      natops-decl   := <collect-all(?NativeOperators(<id>)); concat; !NativeOperators(<id>)> body*;
      arrow-decl    := <collect-all(?Arrows(<id>)); concat; !Arrows(<id>)> body*;
      semcomps-decls := <collect-all(?Components(<id>)); concat; !Components(<id>)> body*;
      varschemes-decl := <collect-all(?VariableSchemes(<id>)); concat; !VariableSchemes(<id>)> body*;
      aliases-decl := <collect-all(?Aliases(<id>)); concat; !Aliases(<id>)> body*;
      signatures    := [ sort-decl, cons-decl, natcons-decl, natops-decl, arrow-decl, natty-decl, semcomps-decls, varschemes-decl, aliases-decl ];
      rule-decl*    := <collect-all(?Rules(<id>)); concat; sort-rules> body*
  
  sort-rules = qsort((rule-con-name, rule-con-name); string-gt)
  
  rule-con-name =
    ?Rule(_, _, Relation(_, Source(Con(<id>, _), _), _, _)) <+ !""
