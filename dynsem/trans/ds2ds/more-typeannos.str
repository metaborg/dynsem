module ds2ds/more-typeannos

imports
  ds2ds/explicate-arrow-types
  signatures/-
  ds
  analysis/-

rules
  
  resugar-and-typecast-lists =
    innermost(resugar-list);
    bottomup(try(add-typeanno-to-list-tuples))

  resugar-list:
    Cast(Wld(), _) -> Wld()

  resugar-list:
    ListTail(h1*, ListTail(h2*, tl)) -> ListTail([h1*, h2*], tl)
  
  resugar-list:
    ListTail(h1*, List_(h2*)) -> List_([h1*, h2*])
  
  resugar-list:
    ListTail(h*, Cast(List_([]), _)) -> List_(h*)
  
  add-typeanno-to-list-tuples:
    l@List_(elems) -> Cast(List_(elems), list-sort)
    where
      list-sort := <type-of; derw-type> l

  add-typeanno-to-list-tuples:
    l@ListTail(elems, tail) -> Cast(ListTail(elems, tail), list-sort)
    where
      list-sort := <type-of; derw-type> l 
  
  add-typeanno-to-list-tuples:
    Formula(Match(List_([]), rhs)) -> Formula(Match(Cast(List_([]), list-sort), rhs))
    where
      list-sort := <type-of; derw-type> rhs
  
  add-typeanno-to-list-tuples:
    Formula(Match(lhs, tup@Tuple(_))) -> Formula(Match(lhs, Cast(tup, tuple-sort)))
    where
      tuple-sort := <type-of; derw-type> lhs
  
  add-typeanno-to-list-tuples:
    LabelComp(Label(l), List_([])) -> LabelComp(Label(l), Cast(List_([]), list-sort))
    where
      list-sort := <lookup-def(|Components()); lookup-prop(|Type()); derw-type> l
  
  add-typeanno-to-list-tuples:
    LabelComp(Label(l), tup@Tuple(_)) -> LabelComp(Label(l), Cast(tup, tup-sort))
    where
      tup-sort := <lookup-def(|Components()); lookup-prop(|Type()); derw-type> l
  
  add-typeanno-to-list-tuples:
    tup@Tuple(t*) -> Cast(Tuple(t*), tuple-sort)
    where
      tuple-sort := <type-of; derw-type> tup
  
  add-typeanno-to-list-tuples:
    MapKeys(t) -> Cast(MapKeys(t), <derw-type> ListType(k))
    where
      MapType(k, _) := <type-of> t
  
  add-typeanno-to-list-tuples:
    MapValues(t) -> Cast(MapValues(t), <derw-type> ListType(v))
    where
      MapType(_, v) := <type-of> t
  
  add-typeanno-to-list-tuples:
    Relation(src, arr@NamedDynamicEmitted(_, arr-name, in-sort), Target(Tuple(tup-t*), o-rw*)) ->
      Relation(src, arr, Target(Cast(Tuple(tup-t*), <derw-type> out-ty), o-rw*))
    where
      in-ty := <rw-type> in-sort;
      ArrowType(_, out-ty) := <select-applicable-arrow-callsite; lookup-prop(|Type())> (<lookup-defs(|Arrows())> arr-name, in-ty)
