module ds2ds/factorize

imports
  signatures/-
  lib-ds
  
strategies
  
  factorize-module =
    Module(id, map(try(factorize-rules)))
        
  factorize-rules = alltd(\ Wld() -> VarRef(<next-variable>) \); alltd(factorize-typecast); alltd(factorize-rule)
  
rules
  
  factorize-rule :
    Rule(prem1*, infer,  Relation(Reads(read*), Source(lhs,sc*), NamedDynamicEmitted(em1*, arrow), Target(rhs,tc*))) -> 
      Rule(prem7*, infer, Relation(Reads(read'*), Source(lhs',sc'*), NamedDynamicEmitted(em1*, arrow), Target(rhs',tc'*)))
    with
  	  (prem2*, read'*) := <try-factor(factorize-source-components)> read*;
      (prem3*, lhs') := <try-factor(factorize-lhs)> lhs;
      (prem4*, sc'*) := <try-factor(factorize-source-components)> sc*;
      (prem5*, rhs') := <try-factor(factorize-rhs)> rhs;
      (prem6*, tc'*) := <try-factor(factorize-target-components)> tc*;
      prem7* := <try(factorize-premises)> [prem3*, prem2*, prem4*, prem1*, prem5*, prem6*]

rules

  factorize-typecast:
    Rule(prem1*, infer, Relation(Reads(read*), Source(lhs,sc*), NamedDynamicEmitted(em1*, arrow), Target(rhs, tc*))) ->
      Rule(prem1'*, infer, Relation(Reads(read*), Source(lhs,sc*), NamedDynamicEmitted(em1*, arrow), Target(rhs', tc'*)))
    where {| R:
      prem1'* := <map(factorize-typecast-prem); concat> prem1*;
      rhs' := <alltd(R)> rhs;
      tc'* := <alltd(R)> tc*
    |}

  factorize-typecast-prem:
    Formula(TypeCast(vref@VarRef(v), ty)) -> [Formula(TypeCheck(vref, ty)), Formula(Match(Cast(vref, ty), vref'))]
    where
      vref' := VarRef(<newname> v);
      rules(R: vref -> vref')
  
  factorize-typecast-prem:
    f -> [f']
    where
      <not(?Formula(TypeCast(_, _)))> f;
      f' := <alltd(R)> f

rules // lift constructor sub-terms in match
  
  try-factor(f) = try-factor(f, id)
  
  try-factor(f, succ) = f; try(succ) <+ !([], <id>)

  factorize-lhs:
  	Con(c, t1*) -> (p*, Con(c, t2*))
  	where
  		(p*, t2*) := <map(lift-match-on-cond(not(is-prime-factor), ?succ)); unzip; (concat, id)> t1*;
  		!succ
  
  factorize-lhs:
    Cast(t1, ty) -> (p*, Cast(t2, ty))
    where
      (p*, t2) := <lift-match-on-cond(not(is-prime-factor), ?succ)> t1;
      !succ
  
  factorize-lhs:
    As(v, t1) -> (p*, As(v, t2))
    where
      (p*, t2) := <factorize-lhs> t1
  
  factorize-rhs = lift-build-on-cond(not(is-prime-factor), ?succ); where(!succ)
  
  factorize-source-components =
    map(try-factor(factorize-source-components, ?succ)); where(!succ); unzip; (concat, id)
  
  factorize-source-components:
    LabelComp(l, t) -> ([Formula(Match(VarRef(v), t))], LabelComp(l, VarRef(v)))
    where
      <not(is-prime-factor)> t;
      v := <next-variable>
  
  factorize-target-components =
    map(try-factor(factorize-target-components, ?succ)); where(!succ); unzip; (concat, id)
  
  factorize-target-components:
    LabelComp(l, t) -> ([Formula(Match(t, VarRef(v)))], LabelComp(l, VarRef(v)))
    where
      <not(is-prime-factor)> t;
      v := <next-variable>
  
  factorize-premises = repeat1(some(factorize-premise); flatten-list)
  
  factorize-premise =
    factorize-match-in-premise
    <+ factorize-termeq-in-premise
    <+ factorize-relation-in-premise
    <+ factorize-casematch-premise
  
  factorize-cases = some(factorize-case)
  
  factorize-case = CasePattern(id, factorize-premises)
  
  factorize-case = CaseOtherwise(factorize-premises)
  
  factorize-casematch-premise:
    CaseMatch(t, case*) -> [p-t*, CaseMatch(t', case*)]
    where
      (p-t*, t') := <lift-build-on-cond(is-build-nonprime-factor, ?success)> t;
      !success
  
  factorize-casematch-premise:
    CaseMatch(t, case*) -> [CaseMatch(t, case'*)]
    where
      case'* := <factorize-cases> case*
  
  factorize-match-in-premise:
    Formula(Match(lhs, rhs)) -> [p-lhs*, Formula(Match(lhs', rhs')) ,p-rhs*]
    where
      <is-build-nonprime-factor> lhs;
      <not(is-prime-factor)> rhs;
      (p-lhs*, lhs') := <lift-build-on-cond(is-build-nonprime-factor, ?success)> lhs;
      (p-rhs*, rhs') := <lift-match-on-cond(not(is-prime-factor), ?success)> rhs;
      !success
  
  factorize-match-in-premise:
    Formula(Match(lhs, rhs)) -> [p-lhs*, Formula(Match(lhs', rhs))]
    where
      (p-lhs*, lhs') := <factorize-build> lhs
  
  factorize-match-in-premise:
    Formula(Match(lhs, rhs)) -> [Formula(Match(lhs, rhs')), p-rhs*]
    where
      (p-rhs*, rhs') := <factorize-match> rhs
  
  factorize-termeq-in-premise:
    Formula(TermEq(lhs, rhs)) -> [Formula(Match(lhs, rhs))]
    where
      <is-constant> rhs
  
  factorize-relation-in-premise:
  	Formula(Relation(Reads(read*), Source(lhs,sc*), NamedDynamicEmitted(em1*, arrow), Target(rhs, tc*))) ->
    [p1*, p2*, p3*, Formula(Relation(Reads(read'*), Source(lhs',sc'*), NamedDynamicEmitted(em1*, arrow), Target(rhs',tc'*))), p4*, p5*]
    where
      (p1*, read'*) := <try-factor(factorize-target-components, ?succ)> read*;
      (p2*, lhs') := <try-factor(factorize-build, ?succ)> lhs;
      (p3*, sc'*) := <try-factor(factorize-target-components, ?succ)> sc*;
      (p4*, rhs') := <lift-match-on-cond(not(is-prime-factor), ?succ)> rhs;
      (p5*, tc'*) := <try-factor(factorize-source-components, ?succ)> tc*;
      !succ

rules

  factorize-match = 
    factorize-constructors-in-match
    <+ factorize-listtail-in-match
    <+ factorize-as-in-match

  factorize-constructors-in-match:
    Con(c, t1*) -> (prem*, Con(c, t2*))
    where
      let cond = not(is-prime-factor)
      in
        (prem*, t2*) := <map(lift-match-on-cond(cond, ?success)); unzip; (concat, id)> t1*;
        !success
      end
  
  factorize-listtail-in-match:
    ListTail([x], xs) -> ([prem1*, prem2*], ListTail([x'], xs'))
    where
    	let cond = not(is-prime-factor)
    	in
    	  (prem1*, x') := <lift-match-on-cond(cond, ?success1)> x;
        (prem2*, xs') := <lift-match-on-cond(cond, ?success2)> xs;
        (!success1 <+ !success2)
      end
  
  factorize-as-in-match:
    As(vref, t) -> ([Formula(Match(vref, t))], vref)
  
  lift-match-on-cond(c, succ):
    t -> ([], t)
    where <not(c)> t
  
  lift-match-on-cond(c, succ):
    t -> ([Formula(Match(VarRef(x), t))], VarRef(x))
    where
       <c> t; try(succ);
       x := <next-variable>

  lift-build-on-cond(c, succ):
    t -> ([], t)
    where <not(c)> t
  
  lift-build-on-cond(c, succ):
    t -> ([Formula(Match(t, VarRef(x)))], VarRef(x))
    where
      <c> t; try(succ);
      x := <next-variable>

  factorize-build =
    factorize-constructors-in-build
    <+ factorize-sortfuncall-in-build
    <+ factorize-listtail-in-build
    <+ factorize-map-in-build
    <+ factorize-mapextend-in-build
    <+ factorize-deassoc-in-build
    <+ factorize-cast-in-build

  factorize-constructors-in-build:
    Con(c, t1*) -> (prem*, Con(c, t2*))
    where
      (prem*, t2*) := <map(lift-build-on-cond(is-build-nonprime-factor, ?success)); unzip; (concat, id)> t1*;
      !success
  
  factorize-sortfuncall-in-build:
    SortFunCall(name, on, t*) -> ([p1*, p2*], SortFunCall(name, on', t'*))
    where
      (p1*, on') := <lift-build-on-cond(is-build-nonprime-factor, ?success)> on;
      (p2*, t'*) := <map(lift-build-on-cond(is-build-nonprime-factor, ?success)); unzip; (concat, id)> t*;
      !success
  
  factorize-listtail-in-build:
    ListTail([x], xs) -> ([prem1*, prem2*], ListTail([x'], xs'))
    where
      (prem1*, x') := <lift-build-on-cond(is-build-nonprime-factor, ?success1)> x;
      (prem2*, xs') := <lift-build-on-cond(is-build-nonprime-factor, ?success2)> xs;
      (!success1 <+ !success2)
  
  factorize-map-in-build:
    Map_([Bind(k, v)]) -> ([prem1*, prem2*], Map_([Bind(k', v')]))
    where
      (prem1*, k') := <lift-build-on-cond(is-build-nonprime-factor, ?success)> k;
      (prem2*, v') := <lift-build-on-cond(is-build-nonprime-factor, ?success)> v;
      !success
  
  factorize-map-in-build:
    MapUnbind(map, key) -> ([prem1*, prem2*], MapUnbind(map', key'))
    where
      (prem1*, map') := <lift-build-on-cond(is-build-nonprime-factor, ?success)> map;
      (prem2*, key') := <lift-build-on-cond(is-build-nonprime-factor, ?success)> key;
      !success
  
  factorize-mapextend-in-build:
    MapExtend(l, r) -> ([prem1*, prem2*], MapExtend(l', r'))
    where
      (prem1*, l') := <lift-build-on-cond(is-build-nonprime-factor, ?success)> l;
      (prem2*, r') := <lift-build-on-cond(is-build-nonprime-factor, ?success)> r;
      !success

  factorize-deassoc-in-build:
    DeAssoc(l, r) -> (prem*, DeAssoc(l, r'))
    where
      (prem*, r') := <lift-build-on-cond(is-build-nonprime-factor, ?success)> r;
      !success
  
  factorize-cast-in-build:
    Cast(t1, ty) -> (prem*, Cast(t2, ty))
    where
      (prem*, t2) := <lift-build-on-cond(is-build-nonprime-factor, ?success)> t1;
      !success
  
  is-build-nonprime-factor = not(is-prime-factor <+ ?List_([])) 
  
  is-constant = ?Int(_) + ?Real(_) + ?String(_) + ?True() + ?False() + ?List_([])
  
  is-prime-factor = ?VarRef(_)

rules

  pretify-lifted-vars-all = id

