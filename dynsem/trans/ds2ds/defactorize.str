module ds2ds/defactorize

imports
  ds
  signatures/-
  signatures/dynsem/-
  ds2ds/sugar
  analysis/mark-references
  lib-ds
  pp

strategies

  defactorize-module =
    Module(id, alltd(defactorize-rule))
  
  insert-wildcards-module =
    Module(id, alltd(insert-wildcards-rule))

rules
  
  defactorize-rule =
    ?Rule(_, _, _);
    {| ReadCount:
      mark-var-defs-in-rule;
      repeat(
        count-varreads-rule;
        defactorize-rule-w-progress
      )
    |}

  defactorize-rule-w-progress =
    lower-termbuilds-rule(try(?progress));
    where(!progress)
  
  insert-wildcards-rule =
    ?Rule(_, _, _);
    {| ReadCount:
      mark-var-defs-in-rule;
      repeat(
        count-varreads-rule;
        insert-wildcards-rule-w-progress
      )
    |}
  
  insert-wildcards-rule-w-progress =
    insert-wildcards-rule(try(?progress));
    where(!progress)
  
  
  count-varreads-rule:
    r@Rule(_, _, _) -> r
    where
      <collect-all(?Var(_) + ?Const(_)); nub; map(init-count-varread)> r;
      <alltd(count-varread)> r
  
  count-varreads-premises =
    is-list;
    where(collect-all(?Var(_) + ?Const(_)); nub; map(init-count-varread));
    alltd(count-varread)
  
  init-count-varread = (?Var(v) + ?Const(v)); rules(ReadCount: v -> 0)
  
  count-varread = 
    (?VarRef(v) + ?ConstRef(v));
    reads := <ReadCount; inc> v;
    rules(ReadCount: v -> reads)

  insert-wildcards-rule(record-progress) = alltd(insert-wildcards(record-progress))
  
  insert-wildcards(record-progress):
    As(v, t) -> <alltd(insert-wildcards(record-progress))> t
    where
      Wld() := <insert-wildcards(record-progress)> v
  
  insert-wildcards(record-progress):
    var -> Wld()
    where
      ?Var(v) + ?Const(v)
    where
      <ReadCount> v => 0;
      record-progress

  lower-termbuilds-rule(record-progress):
    Rule(p*, infer, rel) -> r' 
    where {| PropagateTermBuild:
      p'* := <filter(not(eliminate-termbuild-premise))> p*;
      r' := <innermost(replace-singletonread(record-progress))> Rule(p'*, infer, rel)
    |}
  
  eliminate-termbuild-premise =
    ?Formula(Match(lhs, var));
    (?Var(v) + ?Const(v));
    <ReadCount> v => 1;
    rules(PropagateTermBuild:+ v -> lhs)
  
  replace-singletonread(record-progress):
    var -> t
    where
      ?VarRef(v) + ?ConstRef(v)
    where
      <PropagateTermBuild> v => t;
      record-progress
      

