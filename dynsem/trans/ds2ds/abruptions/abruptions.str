module ds2ds/abruptions/abruptions

imports
  signatures/-
  signatures/dynsem/-
  analysis/-
//  ds2ds/fuse-sections
  ds2ds/explication
  
strategies

  abruptions-enable-module =
    try(
      UsesAbruptions <+
      where(
        ?Module(_, <id>);
        fetch-elem(?Signatures(<id>));
        fetch-elem(?Exceptions(_));
        rules(UsesAbruptions: t -> t)
      )
    )
    
  abruptions-new-scope(s) = {| UsesAbruptions:
    s
  |}
  
  abruptions-are-enabled = where(UsesAbruptions)
  
strategies
  
  abruptions-name-sort-thrown   = !"_Thrown"
  abruptions-name-sort-throwing = !"_Throwing"
  abruptions-name-sort-catching = !"_Catching"
  abruptions-name-sort-val      = !"_ExcVal"
  abruptions-name-sort-unit     = !"U"
  abruptions-name-component     = !"_Exc"
  abruptions-name-arrow-handle  = !"handle"
  abruptions-name-arrow-raise   = !"raise"
  abruptions-name-ctr-ok        = !"OK"
  
  
  abruptions-builtin-signatures-gen =
    srt-decls := Sorts([
                  SortDecl(<abruptions-name-sort-thrown>),
                  SortDecl(<abruptions-name-sort-throwing>),
                  SortDecl(<abruptions-name-sort-catching>),
                  SortDecl(<abruptions-name-sort-val>)
                  ]);
    ctr-decls := Constructors([
                  ConsDecl(<abruptions-name-ctr-ok>, [], SimpleSort(<abruptions-name-sort-thrown>), Annos([]))
                 ]);
    cmp-decls := Components([
                  CompDeclDefault(<abruptions-name-component>, SimpleSort(<abruptions-name-sort-thrown>), Con(<abruptions-name-ctr-ok>, []))
                  ]);
    arr-decls := Arrows([
                  ArrowDecl(ArrowROs([]), SimpleSort(<abruptions-name-sort-throwing>), ArrowRWs([]), "", SimpleSort(<abruptions-name-sort-val>), ArrowRWs([])), 
                  ArrowDecl(ArrowROs([]), SimpleSort(<abruptions-name-sort-catching>), ArrowRWs([]), "", SimpleSort(<abruptions-name-sort-val>), ArrowRWs([])), 
                  NativeFunDecl(ArrowROs([]), <abruptions-name-arrow-handle>, [SimpleSort(<abruptions-name-sort-throwing>), SimpleSort(<abruptions-name-sort-catching>)], ArrowRWs([]), SimpleSort(<abruptions-name-sort-val>), ArrowRWs([])), 
                  NativeFunDecl(ArrowROs([]), <abruptions-name-arrow-handle>, [SimpleSort(<abruptions-name-sort-throwing>), SimpleSort(<abruptions-name-sort-catching>), SimpleSort(<abruptions-name-sort-throwing>)], ArrowRWs([]), SimpleSort(<abruptions-name-sort-val>), ArrowRWs([])), 
                  NativeFunDecl(ArrowROs([]), <abruptions-name-arrow-raise>, [SimpleSort(<abruptions-name-sort-thrown>)], ArrowRWs([]), SimpleSort(<abruptions-name-sort-unit>), ArrowRWs([]))
                  ]);
    !Signatures([srt-decls, ctr-decls, cmp-decls, arr-decls])
  
  abruptions-store-built-ins =
    abruptions-enable-module; abruptions-are-enabled
    < abruptions-builtin-signatures-gen; store-signatures
    + id 
  
  abruptions-store = Exceptions(map(abruptions-store-exception))
  
  abruptions-store-exception:
    e@ExDecl(name, kid*) -> e
    with
      arity := <length> kid*;
      c-def := <store-def(|Constructors())> (name, arity);
      <store-prop(|Type(), c-def)> ConstructorType(<rw-type> kid*, <abruptions-name-sort-thrown>);
      <store-prop(|ConsKind(), c-def)> LanguageCons()
 
  abruptions-inject-definitions-top =
    abruptions-are-enabled
      < abruptions-inject-definitions
      + id
  
  abruptions-inject-definitions:
    Module(name, section*) -> Module(name, section'*)
    where
      section'* := <map(try(abruptions-inject-definitions))> section*

  abruptions-inject-definitions =
    Signatures(partition(abruptions-inject-definitions); (Hd, id); conc)
  
  abruptions-inject-definitions:
    e@Exceptions(exc) -> sig-part*
    with
      Signatures(sig-part*) := <abruptions-builtin-signatures-gen>
  
  explication-gather-data-arrowdecl-extend-api(|comps-table, imps-table) =
    abruptions-are-enabled < abruptions-explicate-arrow-imports(|comps-table, imps-table) + fail
  
  abruptions-explicate-arrow-imports(|comps-table, imps-table) =
    // get handle/2 arrow definition
    throwing-ty := <abruptions-name-sort-throwing>;
    catching-ty := <abruptions-name-sort-catching>;
    t_sort := SimpleSort($[[<abruptions-name-arrow-handle>]_2_Native]);
    arrow-def := <resolve-applicable-arrow-defsite> ("", <rw-type> t_sort);
    throwing-def := <resolve-applicable-arrow-defsite> ("", throwing-ty);
    <explication-api-get-components(|comps-table, imps-table)> throwing-def;
    throwing-import := Impo(throwing-def, []);
    catching-def := <resolve-applicable-arrow-defsite> ("", catching-ty);
    catching-import := Impo(catching-def, []);
    imp* := [throwing-import, catching-import];
    <explication-api-add-imports(|comps-table, imps-table)> (arrow-def, imp*);
    fail

  abruptions-explicate-arrow-imports(|comps-table, imps-table) =
    // get handle/3 arrow definition
    throwing-ty := <abruptions-name-sort-throwing>;
    catching-ty := <abruptions-name-sort-catching>;
    t_sort := SimpleSort($[[<abruptions-name-arrow-handle>]_3_Native]);
    arrow-def := <resolve-applicable-arrow-defsite> ("", <rw-type> t_sort);
    throwing-def := <resolve-applicable-arrow-defsite> ("", throwing-ty);
    throwing-import := Impo(throwing-def, []);
    catching-def := <resolve-applicable-arrow-defsite> ("", catching-ty);
    catching-import := Impo(catching-def, []);
    imp* := [throwing-import, catching-import];
    <explication-api-add-imports(|comps-table, imps-table)> (arrow-def, imp*);
    fail
    
//  explication-explicate-arrow-decl-extend-api(|comps-table, imps-table) = abruptions-explicate-nativefun(|comps-table, imps-table)

  
  
  // the handle/2 and handle/3 native functions
//  abruptions-explicate-nativefun(|comps-table, imps-table):
//    NativeFunDecl(_, cname, kid-srt*@[throwing, catching|_], _, out-srt, _) -> 
//      NativeFunDecl(ArrowROs(ro*), cname, kid-srt*, ArrowRWs(rw*), out-srt, ArrowRWs(rw*))
//    where
//      debug(!"handle1 --> ");
//      abruptions-name-arrow-handle => cname;
//      debug(!"handle2 --> ");
//      throwing-ty := <rw-type> throwing;
//      debug(!"handle3 --> ");
//      abruptions-name-sort-throwing => throwing-ty;
//      debug(!"handle4 --> ");
//      catching-ty := <rw-type> catching;
//      debug(!"handle5 --> ");
//      abruptions-name-sort-catching => catching-ty;
//      t_sort := SimpleSort($[[cname]_[<length; int-to-string> kid-srt*]_Native]);
//      arrow-def := <resolve-applicable-arrow-defsite> ("", <rw-type> t_sort)
//    with
//      debug(!"handle6 --> ");
//      throwing-arow-def := <resolve-applicable-arrow-defsite> ("", throwing-ty);
//      debug(!"handle7 --> ");
//      throwing-comp* := <explication-api-get-components(|comps-table, imps-table)> throwing-arow-def;
//      debug(!"handle8 --> ");
//      catching-arow-def := <resolve-applicable-arrow-defsite> ("", catching-ty);
//      debug(!"handle9 --> ");
//      catching-comp* := <explication-api-get-components(|comps-table, imps-table)> catching-arow-def;
//      // FIXME: remove the _Exc component from the catching arrow?
//      debug(!"handle10 --> ");
//      (comp-ro*, comp-rw*) := <explication-components-nub; partition(?Comp(_, RO()))> [throwing-comp*, catching-comp*];
//      debug(!"handle11 --> ");
//      (ro*, rw*) := <(map(explication-util-comp-to-label), map(explication-util-comp-to-label))> (comp-ro*, comp-rw*);
//      debug(!"handle12 --> ");
//      <explication-api-add-components(|comps-table, imps-table)> (arrow-def, [comp-ro*, comp-rw*]);
//      debug(!"handle13 --> ")
//      
//  abruptions-explicate-nativefun(|comps-table, imps-table):
//    d@NativeFunDecl(ro, cname, kid-srt*, rw, out-srt, rw) -> d
  