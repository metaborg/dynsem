module test/coq-semantics/langs/L1

signature
  
  sorts Typ constructors
    Tint : Typ
    Tarrow : Typ * Typ -> Typ
  
  sorts PreExp constructors
    Num : Int -> PreExp
    Var : Ref -> PreExp
    Binop : Exp * Exp -> PreExp
    Fun : Decl * Typ * Exp -> PreExp
    App : Exp * Exp -> PreExp

  sorts Exp constructors
    E : ScopeId * Typ * PreExp -> Exp

signature
  
  sorts Val constructors
    NumV : Int -> Val
    ClosV : Decl * Exp * FrameId -> Val
  
  arrows
    Exp -eval-> Val

signature // Scope graphs

  sorts Ref Decl ScopeId FrameId H
  
  sorts Label constructors
    P : Label
    I : Label
  
  sorts Path
  
  sorts Addr constructors
    Addr : FrameId * Decl -> Addr

  constructors
    lookup : FrameId * H * Path --> Addr
    get : FrameId * H * Decl --> Val
    pathofRef : Ref --> Path
    scopeofFrame : H * FrameId --> ScopeId
    initFrame : ScopeId * Map(Label, Map(ScopeId, FrameId)) * Map(Decl, Val) --> FrameId

  variables
    s : ScopeId
    f : FrameId
    h : H

  native operators
    plusI  : Int * Int -> Int

rules
  
  E(_ , _, Num(i)) -eval-> NumV(i).
  
  f |- E(_, _, Var(r)) :: h -eval-> v :: h
  where
    pathofRef(r) --> p;
    lookup(f, h, p) --> Addr(f', d);
    get(f', h, d) --> v.
    
  E(_, _, Binop(e1, e2)) -eval-> NumV(plusI(z1, z2))
  where
    e1 -eval-> NumV(z1);
    e2 -eval-> NumV(z2).
  
  f |- E(_, _, Fun(d, _, e)) -eval-> ClosV(d, e, f).
  
  f |- E(_, _, App(e1, e2)) -eval-> v'
  where
    f |- e1 -eval-> ClosV(d, e'@E(s, _, _), f');
    f |- e2 -eval-> v :: h;
    scopeofFrame(h, f') --> s';
    initFrame(s, {P() |--> {s' |--> f'}}, {d |--> v}) --> f'';
    f'' |- e' -eval-> v'.