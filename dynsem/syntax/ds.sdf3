module ds

imports dynsem/Common dynsem/Module dynsem/Signatures
 
context-free start-symbols Module 

syntax
  Rule+-CF = Rule+-CF LAYOUT?-CF Rule-CF {layout(2.first.line > 1.last.line)}

context-free syntax // rules
     
  ModuleSection.Rules = [
    rules 
    
      [ {Rule "\n\n"}* ]
  ] 
  
  Rule.Strict = [strict [ID] [{INT ","}+]/[INT]]
  Rule.Seqstrict = [seqstrict [ID] [{INT ","}+]/[INT]]
    
  Rule.Axiom = [[Formula]]

  Rule.AxiomDot = [[Formula].] {deprecated("Full stop is no longer required. Replace with a newline")}
  
  Rule.Rule = [
    [{Premise ";\n"}+]
    [INFER]
    [Relation]
  ]

  Rule.RuleDot = [
    [{Premise ";\n"}+]
    [INFER]
    [Relation].
  ] {deprecated("Full stop is no longer required. Replace with a newline")}
  
  Rule.RuleW = [
    [Relation]
    where
      [{Premise ";\n"}+]
  ]
  
  Rule.RuleWDot = [
    [Relation]
    where
      [{Premise ";\n"}+].
  ] {deprecated("Full stop is no longer required. Replace with a newline")}
  
  Premise.Formula = [[Formula]]

  Premise.CaseMatch = [
    case [Term] of {
      [{Case "\n"}+]
    }
  ]
  
  Premise.GuardedBind = [
    [Term] as [{GuardedValue "\n or"}+]
  ]
  
  GuardedValue.GValue = [[Term] if [Term]]
  GuardedValue.NegGValue = [[Term] if not [Term]]
  GuardedValue.UValue = Term
  
  Case.CasePattern = [
    [Term] =>
      [{Premise ";\n"}*]
  ]
  
  Case.CaseOtherwise = [
    otherwise =>
      [{Premise ";\n"}*]
  ]
  
  ID = <_> {reject}
  ID = <imports> {reject}
  ID = <signature> {reject}
  ID = <constructors> {reject}
  ID = <sorts> {reject}
  ID = <native> {reject}
  ID = <operators> {reject}
  ID = <datatypes> {reject}
  ID = <semantic> {reject}
  ID = <components> {reject}
  ID = <implicit> {reject}
  ID = <List> {reject}
  ID = <Map> {reject}
  ID = <arrows> {reject}
  ID = <rules> {reject}
  ID = <fresh> {reject}
  ID = <where> {reject}
  ID = <true> {reject}
  ID = <false> {reject}
  ID = <fresh> {reject}
  ID = <fail> {reject}
  ID = <allkeys> {reject}
  ID = <allvalues> {reject}
  ID = <otherwise> {reject}
  ID = <semantic> {reject}
  ID = <components> {reject}
  ID = <case> {reject}
  ID = <as> {reject}
  ID = <or> {reject}
  ID = <if> {reject}
  ID = <not> {reject}
  

context-free syntax // formulas

  Formula.Match    = [[Term] => [Term]]
  Formula.NMatch   = [[Term] =!=> [Term]]
  Formula.TermEq   = [[Term] == [Term]]
  Formula.TermNeq  = [[Term] != [Term]]
  Formula.TypeCheck = [[Var] <? [Type]]
  Formula.TypeCast = [[Var] <: [Type]]
  
  Formula = [[Relation]]
  Relation.Relation = [[Reads][Source] [Rel] [Target]]
  
  Reads.NoReads = []
  Reads.Reads   = [[{LabelComp ", "}+] |- ]
  
  Source.Source = Term
  Source.Source = [[Term] :: [{LabelComp ", "}+]]

  Target.Target = Term
  Target.Target = [[Term] :: [{LabelComp ", "}+]]
  
  Rel.Dynamic = [-->]
  Rel.NamedDynamic = [-[IDNOHYPH]->]
  
  Rel.DynamicEmitted = [-[{LabelComp ", "}+]-->]
  Rel.NamedDynamicEmitted = [-[{LabelComp ", "}+]-[IDNOHYPH]->]
  
  LabelComp.LabelComp = [[Label] [Term]]
  LabelComp.VarLabelComp = [[Var]]

  Label.Label = [[ID]]

context-free syntax // terms

  Var.VarRef    = [[ID]]
  Term = Var
  
  Cast.Cast     = [[Term] : [Type]]
  Term = Cast
  
  Term.As       = [[Var]@[Term]]
  
  Term.Wld      = <_>
  
  Term.String   = [[STRING]]
  
  Term.Int      = [[INT]]
  Term.Real     = [[REAL]]
  Term.Con      = [[ID]([{Term ", "}*])]
  
  Term.List     = <[ <{Term ", "}*> ]>
  Term.ListTail = <[ <{Term ", "}*> | <Term> ]>
  Term.ListLength = <|<Term>|>
  Term.Concat   = [[Term] ++ [Term]] {left}
  Term.Reverse  = [`[Term]] {left}
  
  Term.TermPlaceholder = <???>
  
  Term.Tuple    = <(<{Term ", "}+>)>

  Term.Fresh  = [fresh]
  Term.True   = [true]
  Term.False  = [false]
  
  Term.Map    = [{[{Entry  ", "}*]}]
  Entry.Bind  = [[Term] |--> [Term]]

//  Entry.Binds = [[Term] |*-> [Term]]

  Entry.MapEntry = [[Term]]
  
  Term.DeAssoc = <<Term>[<Term>]>
  
  Term.MapHas = <<Term>[<Term>?]>
  Term.MapExtend = [[Term] + [Term]] {left}
  Term.MapUnbind = [[Term] \ [Term]] {left}

  Term.MapKeys = [allkeys([Term])]
  Term.MapValues = [allvalues([Term])]

  Term.SortFunCall = <<ID>[<Term>](<{Term ", "}*>)>

context-free priorities

  Rule.Axiom, Rule.Rule, Rule.RuleW
  > Term.MapKeys, Term.MapValues
  > Term.Con
  > Term.MapHas, Term.DeAssoc
  > {left:
    Term.MapExtend
    Term.Concat
    }
  > Term.As
  > Cast.Cast
  
